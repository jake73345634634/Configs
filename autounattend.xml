<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
	<!--https://schneegans.de/windows/unattend-generator/?LanguageMode=Unattended&UILanguage=en-US&Locale=en-GB&Keyboard=00000809&GeoLocation=242&ProcessorArchitecture=amd64&BypassRequirementsCheck=true&HidePowerShellWindows=true&ComputerNameMode=Script&ComputerNameScript=return+%27PENTEST-%7B0%3AD3%7D%27+-f+%28+Get-Random+-Minimum+0+-Maximum+999+%29%3B&CompactOsMode=Default&TimeZoneMode=Implicit&PartitionMode=Custom&DiskpartScript=SELECT+DISK%3D0%0D%0ACLEAN%0D%0ACONVERT+GPT%0D%0A%0D%0AREM+WinRE+Partition+%28500MB%2C+with+special+TypeID%29%0D%0ACREATE+PARTITION+PRIMARY+SIZE%3D500%0D%0AFORMAT+QUICK+FS%3DNTFS+LABEL%3D%22WinRE%22%0D%0ASET+ID%3DDE94BBA4-06D1-4D40-A16A-BFD50179D6AC%0D%0AGPT+ATTRIBUTES%3D0x8000000000000001%0D%0A%0D%0AREM+EFI+System+Partition+%28100MB%29%0D%0ACREATE+PARTITION+EFI+SIZE%3D100%0D%0AFORMAT+QUICK+FS%3DFAT32+LABEL%3D%22System%22%0D%0A%0D%0AREM+MSR+%2816MB%29%0D%0ACREATE+PARTITION+MSR+SIZE%3D16%0D%0A%0D%0AREM+Windows+partition+%28remaining+space%29%0D%0ACREATE+PARTITION+PRIMARY%0D%0AFORMAT+QUICK+FS%3DNTFS+LABEL%3D%22Windows%22&InstallToMode=Available&DiskAssertionMode=Skip&WindowsEditionMode=Generic&WindowsEdition=pro&InstallFromMode=Automatic&PEMode=Default&UserAccountMode=Unattended&AccountName0=Pentest&AccountDisplayName0=&AccountPassword0=&AccountGroup0=Administrators&AutoLogonMode=Own&PasswordExpirationMode=Unlimited&LockoutMode=Default&HideFiles=HiddenSystem&ShowFileExtensions=true&ClassicContextMenu=true&LaunchToThisPC=true&ShowEndTask=true&TaskbarSearch=Box&TaskbarIconsMode=Custom&TaskbarIconsXml=%3CLayoutModificationTemplate+xmlns%3D%22http%3A%2F%2Fschemas.microsoft.com%2FStart%2F2014%2FLayoutModification%22+xmlns%3Adefaultlayout%3D%22http%3A%2F%2Fschemas.microsoft.com%2FStart%2F2014%2FFullDefaultLayout%22+xmlns%3Astart%3D%22http%3A%2F%2Fschemas.microsoft.com%2FStart%2F2014%2FStartLayout%22+xmlns%3Ataskbar%3D%22http%3A%2F%2Fschemas.microsoft.com%2FStart%2F2014%2FTaskbarLayout%22+Version%3D%221%22%3E%0D%0A++%3CCustomTaskbarLayoutCollection+PinListPlacement%3D%22Replace%22%3E%0D%0A++++%3Cdefaultlayout%3ATaskbarLayout%3E%0D%0A++++++%3Ctaskbar%3ATaskbarPinList%3E%0D%0A++++++++%3Ctaskbar%3ADesktopApp+DesktopApplicationID%3D%22Microsoft.Windows.Explorer%22+%2F%3E%0D%0A++++++++%3Ctaskbar%3AUWA+AppUserModelID%3D%22Microsoft.MicrosoftEdge_8wekyb3d8bbwe%21MicrosoftEdge%22+%2F%3E%0D%0A++++++++%3Ctaskbar%3AUWA+AppUserModelID%3D%22windows.immersivecontrolpanel_cw5n1h2txyewy%21microsoft.windows.immersivecontrolpanel%22+%2F%3E%0D%0A++++++%3C%2Ftaskbar%3ATaskbarPinList%3E%0D%0A++++%3C%2Fdefaultlayout%3ATaskbarLayout%3E%0D%0A++%3C%2FCustomTaskbarLayoutCollection%3E%0D%0A%3C%2FLayoutModificationTemplate%3E&DisableWidgets=true&LeftTaskbar=true&HideTaskViewButton=true&DisableBingResults=true&StartTilesMode=Default&StartPinsMode=Empty&DisableUac=true&DisableSmartScreen=true&EnableLongPaths=true&HardenSystemDriveAcl=true&AllowPowerShellScripts=true&TurnOffSystemSounds=true&DisableAppSuggestions=true&HideEdgeFre=true&DisableEdgeStartupBoost=true&DeleteWindowsOld=true&ProcessAudit=true&ProcessAuditCommandLine=true&EffectsMode=Default&DesktopIconsMode=Default&StartFoldersMode=Default&WifiMode=Skip&ExpressSettings=DisableAll&LockKeysMode=Skip&StickyKeysMode=Disabled&ColorMode=Custom&SystemColorTheme=Dark&AppsColorTheme=Dark&AccentColor=%231c9ed3&AccentColorOnStart=true&AccentColorOnBorders=true&WallpaperMode=Solid&WallpaperColor=%23002a30&LockScreenMode=Default&Remove3DViewer=true&RemoveBingSearch=true&RemoveCalculator=true&RemoveCamera=true&RemoveClipchamp=true&RemoveClock=true&RemoveCopilot=true&RemoveCortana=true&RemoveDevHome=true&RemoveWindowsHello=true&RemoveFamily=true&RemoveFeedbackHub=true&RemoveGameAssist=true&RemoveGetHelp=true&RemoveHandwriting=true&RemoveInternetExplorer=true&RemoveMailCalendar=true&RemoveMaps=true&RemoveMathInputPanel=true&RemoveMediaFeatures=true&RemoveMixedReality=true&RemoveZuneVideo=true&RemoveNews=true&RemoveNotepad=true&RemoveOffice365=true&RemoveOneDrive=true&RemoveOneNote=true&RemoveOneSync=true&RemoveOutlook=true&RemovePaint=true&RemovePaint3D=true&RemovePeople=true&RemovePhotos=true&RemovePowerAutomate=true&RemovePowerShell2=true&RemovePowerShellISE=true&RemoveQuickAssist=true&RemoveRecall=true&RemoveSkype=true&RemoveSnippingTool=true&RemoveSolitaire=true&RemoveSpeech=true&RemoveStepsRecorder=true&RemoveStickyNotes=true&RemoveTeams=true&RemoveGetStarted=true&RemoveToDo=true&RemoveVoiceRecorder=true&RemoveWallet=true&RemoveWeather=true&RemoveFaxAndScan=true&RemoveWindowsMediaPlayer=true&RemoveZuneMusic=true&RemoveWordPad=true&RemoveXboxApps=true&RemoveYourPhone=true&FirstLogonScript0=%23+Create+directory+stucture%0D%0A%24logs_directory+%3D+New-Item+-Path+%22%24env%3AUSERPROFILE%5CDesktop%22+-Name+%22Build+Logs%22+-ItemType+Directory%0D%0A%24logs+%3D+New-Item+-Path+%24logs_directory+-Name+logs.txt+-ItemType+File%0D%0A%24winget_logs+%3D+New-Item+-Path+%24logs_directory+-Name+winget.txt+-ItemType+File%0D%0A%24docker_logs+%3D+New-Item+-Path+%24logs_directory+-Name+docker.txt+-ItemType+File%0D%0A%24github_logs+%3D+New-Item+-Path+%24logs_directory+-Name+github.txt+-ItemType+File%0D%0A%24powershell_logs+%3D+New-Item+-Path+%24logs_directory+-Name+powershell.txt+-ItemType+File%0D%0A%24capabilities_logs+%3D+New-Item+-Path+%24logs_directory+-Name+capabilities.txt+-ItemType+File%0D%0A%0D%0A%24job_directory+%3D+New-Item+-Path+%22%24env%3AUSERPROFILE%5CDesktop%22+-Name+Job+-ItemType+Directory%0D%0A%24phase_directory+%3D+New-Item+-Path+%24job_directory+-Name+PhaseName+-ItemType+Directory%0D%0ANew-Item+-Path+%24phase_directory+-Name+Docs+-ItemType+Directory%0D%0ANew-Item+-Path+%24phase_directory+-Name+Evidence+-ItemType+Directory%0D%0ANew-Item+-Path+%24phase_directory+-Name+Output+-ItemType+Directory%0D%0ANew-Item+-Path+%24phase_directory+-Name+scribe.txt+-ItemType+File%0D%0ANew-Item+-Path+%24phase_directory+-Name+notes.txt+-ItemType+File%0D%0ANew-Item+-Path+%24phase_directory+-Name+vulnerabilities.txt+-ItemType+File%0D%0A%0D%0A%24tools_directory+%3D+New-Item+-Path+%22%24env%3AUSERPROFILE%5CDesktop%22+-Name+Tools+-ItemType+Directory%0D%0A%24config+%3D+New-Item+-Path+%24tools_directory+-Name+Config+-ItemType+Directory%0D%0A%24evasion+%3D+New-Item+-Path+%24tools_directory+-Name+Evasion+-ItemType+Directory%0D%0A%24windows+%3D+New-Item+-Path+%24tools_directory+-Name+Windows+-ItemType+Directory%0D%0A%24active_directory+%3D+New-Item+-Path+%24tools_directory+-Name+%22Active+Directory%22+-ItemType+Directory%0D%0A%24network+%3D+New-Item+-Path+%24tools_directory+-Name+Network+-ItemType+Directory%0D%0A%24kubernetes+%3D+New-Item+-Path+%24tools_directory+-Name+Kubernetes+-ItemType+Directory%0D%0A%24azure+%3D+New-Item+-Path+%24tools_directory+-Name+Azure+-ItemType+Directory%0D%0A%0D%0A%24winget_applications+%3D+%40%7B%0D%0A++++%22OffSec.KaliLinux%22+%3D+%22%22%0D%0A++++%22Microsoft.VisualStudio.2022.Community%22+%3D+%22%2D%2Dquiet+%2D%2Dwait+%2D%2Dnorestart+%2D%2Dadd+Microsoft.VisualStudio.Workload.ManagedDesktop+%2D%2Dadd+Microsoft.Net.Component.4.5.TargetingPack+%2D%2Dadd+Microsoft.Net.Component.4.5.1.TargetingPack+%2D%2Dadd+Microsoft.Net.Component.4.5.2.TargetingPack+%2D%2Dadd+Microsoft.Net.Component.4.6.TargetingPack+%2D%2Dadd+Microsoft.Net.Component.4.6.1.TargetingPack+%2D%2Dadd+Microsoft.Net.Component.4.6.2.TargetingPack+%2D%2Dadd+Microsoft.Net.Component.4.7.TargetingPack+%2D%2Dadd+Microsoft.Net.Component.4.7.1.TargetingPack+%2D%2Dadd+Microsoft.Net.Component.4.7.2.TargetingPack+%2D%2Dadd+Microsoft.Net.Component.4.8.TargetingPack%22%0D%0A++++%22Microsoft.VisualStudioCode%22+%3D+%22%22%0D%0A++++%22Microsoft.Sysinternals.Suite%22+%3D+%22%22%0D%0A++++%22Microsoft.Office%22+%3D+%22%22%0D%0A++++%22Microsoft.AzureCLI%22+%3D+%22%22%0D%0A++++%22Microsoft.Azure.StorageExplorer%22+%3D+%22%22%0D%0A++++%22WireGuard.WireGuard%22+%3D+%22%22%0D%0A++++%227zip.7zip%22+%3D+%22%22%0D%0A++++%22Git.Git%22+%3D+%22%22%0D%0A++++%22Python.Python.3.13%22+%3D+%22%22%0D%0A++++%22OpenJS.NodeJS%22+%3D+%22%22%0D%0A++++%22GoLang.Go%22+%3D+%22%22%0D%0A++++%22jqlang.jq%22+%3D+%22%22%0D%0A++++%22Greenshot.Greenshot%22+%3D+%22%22%0D%0A++++%22mRemoteNG.mRemoteNG%22+%3D+%22%22%0D%0A++++%22PortSwigger.BurpSuite.Professional%22+%3D+%22%22%0D%0A++++%22Tenable.Nessus%22+%3D+%22%22%0D%0A++++%22WiresharkFoundation.Wireshark%22+%3D+%22%22%0D%0A++++%22Insecure.Nmap%22+%3D+%22%22%0D%0A++++%22Oracle.VirtualBox%22+%3D+%22%22%0D%0A++++%22Insomnia.Insomnia%22+%3D+%22%22%0D%0A++++%22Spotify.Spotify%22+%3D+%22%22%0D%0A%7D%0D%0A%0D%0A%24docker_applications+%3D+%40%28%0D%0A++++%22postgres%3A16%22%2C%0D%0A++++%22neo4j%3A4.4%22%2C%0D%0A++++%22specterops%2Fbloodhound%22%2C%0D%0A++++%22projectdiscovery%2Fnuclei%22%2C%0D%0A++++%22blacklanternsecurity%2Fbbot%22%2C%0D%0A++++%22ghcr.io%2Fgchq%2Fcyberchef%22%0D%0A%29%0D%0A%0D%0A%24github_repositories+%3D+%40%7B%0D%0A++++%22https%3A%2F%2Fgithub.com%2Fjake73345634634%2FConfigs%22+%3D+%22%24config%5CConfigs%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2Fh4wkst3r%2FInvisibilityCloak%22+%3D+%22%24evasion%5CInvisibilityCloak%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2F0xb11a1%2FyetAnotherObfuscator%22+%3D+%22%24evasion%5CyetAnotherObfuscator%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2Fgentilkiwi%2Fmimikatz%22+%3D+%22%24windows%5Cmimikatz%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2FGhostPack%2FRubeus%22+%3D+%22%24windows%5CRubeus%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2FGhostPack%2FSeatbelt%22+%3D+%22%24windows%5CSeatbelt%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2FSpecterOps%2FAzureHound%22+%3D+%22%24azure%5CAzureHound%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2FSpecterOps%2FSharpHound%22+%3D+%22%24active_directory%5CSharpHound%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2Fg0h4n%2FRustHound-CE%22+%3D+%22%24active_directory%5CRustHound-CE%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2Fly4k%2FCertipy%22+%3D+%22%24active_directory%5CCertipy%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2FCravateRouge%2FbloodyAD%22+%3D+%22%24active_directory%5CbloodyAD%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2FPlumHound%2FPlumHound%22+%3D+%22%24active_directory%5CPlumHound%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2Fzeronetworks%2FBlueHound%22+%3D+%22%24active_directory%5CBlueHound%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2FEvotecIT%2FGPOZaurr%22+%3D+%22%24active_directory%5CGPOZaurr%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2Ftechspence%2FScriptSentry%22+%3D+%22%24active_directory%5CScriptSentry%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2Fprojectdiscovery%2Fnuclei-templates%22+%3D+%22%24network%5Cnuclei-templates%22%0D%0A++++%22https%3A%2F%2Fgithub.com%2Fjake73345634634%2FKubernetes-RBAC-Audit%22+%3D+%22%24kubernetes%5CKubernetes-RBAC-Audit%22%0D%0A%7D%0D%0A%0D%0A%24applications+%3D+%40%28%0D%0A%0D%0A%29%0D%0A%0D%0A%24powershell_modules+%3D+%40%28%0D%0A++++%22Invoke-ArgFuscator%22%2C%0D%0A++++%22AADInternals%22%0D%0A%29%0D%0A%0D%0A%24windows_capabilities+%3D+%40%28%0D%0A++++%22Rsat.ActiveDirectory.DS-LDS.Tools%7E%7E%7E%7E0.0.1.0%22%0D%0A%29%0D%0A%0D%0A%23+Create+%22shortcuts%22+for+services%0D%0A%22docker+compose+-f+%24config%5CConfigs%5Cbloodhound-docker-compose.yml+-p+bloodhound+up+-d%22+%7C+Out-File+-FilePath+%22%24env%3AUSERPROFILE%5CDesktop%5CBloodhound.bat%22+-Encoding+Ascii%0D%0A%22docker+run+-d+-p+10001%3A80+ghcr.io%2Fgchq%2Fcyberchef%22+%7C+Out-File+-FilePath+%22%24env%3AUSERPROFILE%5CDesktop%5CCyberChef.bat%22+-Encoding+Ascii%0D%0A%0D%0A%23+Create+bookmarks%0D%0A%24favourites+%3D+%40%7B%0D%0A++++toplevel_name+%3D+%22Tools%22%0D%0A%7D%2C%0D%0A%40%7B%0D%0A++++name+%3D+%22BloodHound%22%0D%0A++++url+%3D+%22http%3A%2F%2Flocalhost%3A10000%22%0D%0A%7D%2C%0D%0A%40%7B%0D%0A++++name+%3D+%22Nessus%22%0D%0A++++url+%3D+%22https%3A%2F%2Flocalhost%3A8834%22%0D%0A%7D+%7C+ConvertTo-JSON+-Depth+4+-Compress%0D%0A%0D%0A%24settings+%3D+%0D%0A%5BPSCustomObject%5D%40%7B%0D%0A++++Path++%3D+%22SOFTWARE%5CPolicies%5CMicrosoft%5CEdge%22%0D%0A++++Value+%3D+%24favourites%0D%0A++++Name++%3D+%22ManagedFavorites%22%0D%0A%7D+%7C+Group-Object+Path%0D%0A%0D%0AForEach+%28%24setting+in+%24settings%29+%7B%0D%0A++++%24registry+%3D+%5BMicrosoft.Win32.Registry%5D%3A%3ALocalMachine.OpenSubKey%28%24setting.Name%2C+%24true%29%0D%0A%0D%0A++++If+%28%24null+-eq+%24registry%29+%7B%0D%0A++++++++%24registry+%3D+%5BMicrosoft.Win32.Registry%5D%3A%3ALocalMachine.CreateSubKey%28%24setting.Name%2C+%24true%29%0D%0A++++%7D%0D%0A%0D%0A++++%24setting.Group+%7C+ForEach-Object+%7B%0D%0A++++++++%24registry.SetValue%28%24_.name%2C+%24_.value%29%0D%0A++++%7D%0D%0A%0D%0A++++%24registry.Dispose%28%29%0D%0A%7D%0D%0A%0D%0A%24settings+%3D+%0D%0A%5BPSCustomObject%5D%40%7B%0D%0A++++Path++%3D+%22SOFTWARE%5CPolicies%5CMicrosoft%5CEdge%22%0D%0A++++Value+%3D+0%0D%0A++++Name++%3D+%22ImportFavorites%22%0D%0A%7D+%7C+Group-Object+Path%0D%0A%0D%0AForEach+%28%24setting+in+%24settings%29+%7B%0D%0A++++%24registry+%3D+%5BMicrosoft.Win32.Registry%5D%3A%3ALocalMachine.OpenSubKey%28%24setting.Name%2C+%24true%29%0D%0A%0D%0A++++if+%28%24null+-eq+%24registry%29+%7B%0D%0A++++++++%24registry+%3D+%5BMicrosoft.Win32.Registry%5D%3A%3ALocalMachine.CreateSubKey%28%24setting.Name%2C+%24true%29%0D%0A++++%7D%0D%0A%0D%0A++++%24setting.Group+%7C+ForEach-Object+%7B%0D%0A++++++++%24registry.SetValue%28%24_.name%2C+%24_.value%29%0D%0A++++%7D%0D%0A%0D%0A++++%24registry.Dispose%28%29%0D%0A%7D%0D%0A%0D%0A%23+Check+compatibility%0D%0AIf+%28%5BSystem.Environment%5D%3A%3AOSVersion.Version.Build+-lt+26100%29+%7B%0D%0A++++%22%5B%21%5D+Windows+11+24H2+or+later+is+required.%22+%7C+Out-File+-FilePath+%24logs+-Append+-Encoding+Ascii%0D%0A%0D%0A++++Return%0D%0A%7D%0D%0A%0D%0A%23+Change+behaviour+when+closing+the+lid%0D%0Apowercfg.exe+%2FsetACvalueIndex+scheme_current+sub_buttons+lidAction+0%0D%0Apowercfg.exe+%2FsetDCvalueIndex+scheme_current+sub_buttons+lidAction+0%0D%0Apowercfg.exe+%2FsetActive+scheme_current%0D%0A%0D%0A%23+Add+Defender+exclusions%0D%0AAdd-MpPreference+-ExclusionPath+%24job_directory%0D%0AAdd-MpPreference+-ExclusionPath+%24tools_directory%0D%0A%0D%0A%23+Install+PowerShell+modules%0D%0AInstall-PackageProvider+-Name+NuGet+-MinimumVersion+2.8.5.201+-Force+-Scope+CurrentUser%0D%0ASet-PSRepository+-Name+PSGallery+-InstallationPolicy+Trusted%0D%0A%0D%0A%24powershell_modules+%7C+ForEach-Object+%7B%0D%0A++++Install-Module+-Name+%24_+-Scope+CurrentUser+%7C+Out-File+-FilePath+%24powershell_logs+-Append+-Encoding+Ascii%0D%0A%7D%0D%0A%0D%0A%23+Install+Windows+capabilities%0D%0A%24windows_capabilities+%7C+ForEach-Object+%7B%0D%0A++++Add-WindowsCapability+-Name+%24_+-Online+%7C+Out-File+-FilePath+%24capabilities_logs+-Append+-Encoding+Ascii%0D%0A%7D%0D%0A%0D%0A%23+Setup+WinGet%0D%0A%24winget_timeout+%3D+%5Bdatetime%5D%3A%3ANow.AddMinutes%285%29%0D%0A%24winget_exe+%3D+%22%24env%3ALOCALAPPDATA%5CMicrosoft%5CWindowsApps%5Cwinget.exe%22%0D%0A%24winget_exists+%3D+%24true%0D%0A%0D%0AWhile+%28%24true%29+%7B%0D%0A++++If+%28%24winget_exe+%7C+Test-Path%29+%7B%0D%0A++++++++Break%0D%0A++++%7D%0D%0A%0D%0A++++If+%28%5Bdatetime%5D%3A%3ANow+-gt+%24winget_timeout%29+%7B%0D%0A++++++++%24winget_exists+%3D+%24false%0D%0A++++++++%22%5B%21%5D+WinGet+application+does+not+exist.%22+%7C+Out-File+-FilePath+%24winget_logs+-Append+-Encoding+Ascii%0D%0A%0D%0A++++++++Break%0D%0A++++%7D%0D%0A%0D%0A++++Start-Sleep+-Seconds+1%0D%0A%7D%0D%0A%0D%0AIf+%28%24winget_exists%29+%7B%0D%0A++++%24winget_applications.GetEnumerator%28%29+%7C+ForEach-Object+%7B%0D%0A++++++++%22%5B*%5D+WinGet%3A+%24%28%24_.Name%29+%24%28%24_.Value%29%22+%7C+Out-File+-FilePath+%24winget_logs+-Append+-Encoding+Ascii%0D%0A%0D%0A++++++++%24arguments+%3D+%40%28%0D%0A++++++++++++%22install%22%2C%0D%0A++++++++++++%22%2D%2Dexact%22%2C%0D%0A++++++++++++%22%2D%2Did%22%2C+%22%24%28%24_.Name%29%22%2C%0D%0A++++++++++++%22%2D%2Dsilent%22%2C%0D%0A++++++++++++%22%2D%2Daccept-package-agreements%22%2C%0D%0A++++++++++++%22%2D%2Daccept-source-agreements%22%2C%0D%0A++++++++++++%22%2D%2Dsource%22%2C+%22winget%22%0D%0A++++++++%29%0D%0A%0D%0A++++++++If+%28%24_.Value+-ne+%22%22%29+%7B%0D%0A++++++++++++%24arguments+%2B%3D+%40%28%22%2D%2Doverride%22%2C+%22%24%28%24_.Value%29%22%29%0D%0A++++++++%7D%0D%0A%0D%0A++++++++%26+%24winget_exe+%40arguments+%7C+Out-File+-FilePath+%24winget_logs+-Append+-Encoding+Ascii%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0A%23+Activate+Windows+and+Office%0D%0A%26+%28%5BScriptBlock%5D%3A%3ACreate%28%28Invoke-RestMethod+-Uri+https%3A%2F%2Fget.activated.win%29%29%29+%2FHWID+%2FOhook%0D%0A%0D%0A%23+Install+GitHub+repositories%0D%0A%24git_exe+%3D+%22%24env%3AProgramFiles%5CGit%5Ccmd%5Cgit.exe%22%0D%0A%0D%0A%24github_repositories.GetEnumerator%28%29+%7C+ForEach-Object+%7B%0D%0A++++%22%5B*%5D+GitHub%3A+%24%28%24_.Name%29%22+%7C+Out-File+-FilePath+%24github_logs+-Append+-Encoding+Ascii%0D%0A%0D%0A++++%26+%24git_exe+clone+%24_.Name+%24_.Value+%7C+Out-File+-FilePath+%24github_logs+-Append+-Encoding+Ascii%0D%0A%7D%0D%0A%0D%0A%23+Install+WSL%0D%0Awsl+%2D%2Dinstall%0D%0A%0D%0A%23+Install+Docker%0D%0A%24docker_applications+%7C+ForEach-Object+%7B+%22%24_%22+%7D+%7C+Out-File+-FilePath+%24env%3ASystemRoot%5CSetup%5CScripts%5CDockerApplications.txt+-Append+-Encoding+Ascii%0D%0A%0D%0A%40%27%0D%0A%24docker_uri+%3D+%5Buri%5D%3A%3ANew%28%22https%3A%2F%2Fdesktop.docker.com%2Fwin%2Fmain%2Famd64%2FDocker%2520Desktop%2520Installer.exe%22%29%0D%0A%24docker_installer+%3D+%22%24env%3ATEMP%5C%7B0%7D%22+-f+%24docker_uri.Segments%5B-1%5D%0D%0A%5BSystem.Net.WebClient%5D%3A%3ANew%28%29.DownloadFile%28%24docker_uri%2C+%24docker_installer%29%0D%0AStart-Process+-FilePath+%24docker_installer+-ArgumentList+%22install%22%2C+%22%2D%2Dquiet%22%2C+%22%2D%2Daccept-license%22+-Wait%0D%0ARemove-Item+-LiteralPath+%24docker_installer+-ErrorAction+%22SilentlyContinue%22%0D%0A%0D%0A%24docker_timeout+%3D+%5Bdatetime%5D%3A%3ANow.AddMinutes%285%29%0D%0A%24docker_desktop_exe+%3D+%22%24env%3AProgramFiles%5CDocker%5CDocker%5CDocker+Desktop.exe%22%0D%0A%0D%0AWhile+%28%24true%29+%7B%0D%0A++++If+%28%24docker_desktop_exe+%7C+Test-Path%29+%7B%0D%0A++++++++Start-Process+-FilePath+%24docker_desktop_exe+-WindowStyle+Hidden%0D%0A%0D%0A++++++++Break%0D%0A++++%7D%0D%0A%0D%0A++++If+%28%5Bdatetime%5D%3A%3ANow+-gt+%24docker_timeout%29+%7B%0D%0A++++++++%22File+%7B0%7D+does+not+exist.%22+-f+%24docker_desktop_exe+%7C+Write-Warning%0D%0A%0D%0A++++++++Return%0D%0A++++%7D%0D%0A%0D%0A++++Start-Sleep+-Seconds+1%0D%0A%7D%0D%0A%0D%0A%24docker_engine_ready_timeout+%3D+%5Bdatetime%5D%3A%3ANow.AddMinutes%285%29%0D%0A%24docker_exe+%3D+%22%24env%3AProgramFiles%5CDocker%5CDocker%5Cresources%5Cbin%5Cdocker.exe%22%0D%0A%0D%0A%24docker_tmp_file+%3D+%22%24env%3AUSERPROFILE%5CDesktop%5Cinfo.txt%22%0D%0A%0D%0AWhile+%28%24true%29+%7B%0D%0A++++Try+%7B%0D%0A++++++++%26+%24docker_exe+info+%7C+Out-File+-FilePath+%24docker_tmp_file+-Append+-Encoding+Ascii%0D%0A%0D%0A++++++++%24docker_ready_indicator+%3D+Get-Content+-Path+%24docker_tmp_file+-Raw%0D%0A%0D%0A++++++++If+%28%24docker_ready_indicator+-match+%22Name%3A+docker-desktop%22%29+%7B%0D%0A++++++++++++Break%0D%0A++++++++%7D%0D%0A++++%7D+Catch+%7B%0D%0A++++++++%22Failed+to+run+Docker%22+%7C+Out-File+-FilePath+%24env%3AUSERPROFILE%5CDesktop%5Cerrors.txt+-Append+-Encoding+Ascii%0D%0A++++++++%24_+%7C+Out-File+-FilePath+%24env%3AUSERPROFILE%5CDesktop%5Cerrors.txt+-Append+-Encoding+Ascii%0D%0A++++%7D%0D%0A%0D%0A++++If+%28%5Bdatetime%5D%3A%3ANow+-gt+%24docker_engine_ready_timeout%29+%7B%0D%0A++++++++%22Failed+to+initialise+Docker%22+%7C+Out-File+-FilePath+%24env%3AUSERPROFILE%5CDesktop%5Cerrors.txt+-Append+-Encoding+Ascii%0D%0A%0D%0A++++++++Return%0D%0A++++%7D%0D%0A%0D%0A++++Start-Sleep+-Seconds+1%0D%0A%7D%0D%0A%0D%0AGet-Content+-Path+%24env%3ASystemRoot%5CSetup%5CScripts%5CDockerApplications.txt+%7C+ForEach-Object+%7B%0D%0A++++%22%5B*%5D+Docker%3A+%24_%22+%7C+Out-File+-FilePath+%22%24env%3AUSERPROFILE%5CDesktop%5CBuild+Logs%5Cdocker.txt%22+-Append+-Encoding+Ascii%0D%0A%0D%0A++++%26+%24docker_exe+pull+%24_+%7C+Out-File+-FilePath+%22%24env%3AUSERPROFILE%5CDesktop%5CBuild+Logs%5Cdocker.txt%22+-Append+-Encoding+Ascii%0D%0A%7D%0D%0A%0D%0A%23%23+%2D%2D%2D%2D%2D%2D-+%23%23%0D%0A%23%23+CLEANUP+%23%23%0D%0A%23%23+%2D%2D%2D%2D%2D%2D-+%23%23%0D%0A%0D%0ARemove-Item+-Path+%24env%3APUBLIC%5CDesktop%5C*%0D%0ARemove-Item+-Path+%22%24env%3AUSERPROFILE%5CDesktop%5CDocker+Desktop.lnk%22%0D%0ARemove-Item+-Path+%22%24env%3AUSERPROFILE%5CDesktop%5CInsomnia.lnk%22%0D%0A%0D%0ARemove-Item+-Path+%24docker_tmp_file%0D%0A%0D%0ANew-Item+-Path+%24env%3AUSERPROFILE%5CDesktop+-Name+SetupComplete.txt+-ItemType+File%0D%0A%0D%0ARestart-Computer+-Force%0D%0A%0D%0A%27%40+%7C+Out-File+-FilePath+%24env%3ASystemRoot%5CSetup%5CScripts%5CDockerInstall.ps1+-Append+-Encoding+Ascii%0D%0A%0D%0ANew-ItemProperty+-Path+%22HKCU%3ASoftware%5CMicrosoft%5CWindows%5CCurrentVersion%5CRunOnce%22+-Name+DockerInstall+-Value+%22powershell+-File+%24env%3ASystemRoot%5CSetup%5CScripts%5CDockerInstall.ps1%22%0D%0A%0D%0ARestart-Computer+-Force&FirstLogonScriptType0=Ps1&WdacMode=Skip-->
	<settings pass="offlineServicing"></settings>
	<settings pass="windowsPE">
		<component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<UILanguage>en-US</UILanguage>
		</component>
		<component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<ImageInstall>
				<OSImage>
					<InstallToAvailablePartition>true</InstallToAvailablePartition>
				</OSImage>
			</ImageInstall>
			<UserData>
				<ProductKey>
					<Key>VK7JG-NPHTM-C97JM-9MPGT-3V66T</Key>
					<WillShowUI>OnError</WillShowUI>
				</ProductKey>
				<AcceptEula>true</AcceptEula>
			</UserData>
			<UseConfigurationSet>false</UseConfigurationSet>
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassTPMCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassSecureBootCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassRAMCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>4</Order>
					<Path>cmd.exe /c "&gt;&gt;"X:\diskpart.txt" (echo:SELECT DISK=0&amp;echo:CLEAN&amp;echo:CONVERT GPT&amp;echo:REM WinRE Partition (500MB, with special TypeID^)&amp;echo:CREATE PARTITION PRIMARY SIZE=500&amp;echo:FORMAT QUICK FS=NTFS LABEL=^"WinRE^")"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>5</Order>
					<Path>cmd.exe /c "&gt;&gt;"X:\diskpart.txt" (echo:SET ID=DE94BBA4-06D1-4D40-A16A-BFD50179D6AC&amp;echo:GPT ATTRIBUTES=0x8000000000000001&amp;echo:REM EFI System Partition (100MB^)&amp;echo:CREATE PARTITION EFI SIZE=100&amp;echo:FORMAT QUICK FS=FAT32 LABEL=^"System^")"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>6</Order>
					<Path>cmd.exe /c "&gt;&gt;"X:\diskpart.txt" (echo:REM MSR (16MB^)&amp;echo:CREATE PARTITION MSR SIZE=16&amp;echo:REM Windows partition (remaining space^)&amp;echo:CREATE PARTITION PRIMARY&amp;echo:FORMAT QUICK FS=NTFS LABEL=^"Windows^")"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>7</Order>
					<Path>cmd.exe /c "diskpart.exe /s "X:\diskpart.txt" &gt;&gt;"X:\diskpart.log" || ( type "X:\diskpart.log" &amp; echo diskpart encountered an error. &amp; pause &amp; exit /b 1 )"</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
	</settings>
	<settings pass="generalize"></settings>
	<settings pass="specialize">
		<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<ComputerName>TEMPNAME</ComputerName>
		</component>
		<component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>powershell.exe -WindowStyle Hidden -NoProfile -Command "$xml = [xml]::new(); $xml.Load('C:\Windows\Panther\unattend.xml'); $sb = [scriptblock]::Create( $xml.unattend.Extensions.ExtractScript ); Invoke-Command -ScriptBlock $sb -ArgumentList $xml;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>powershell.exe -WindowStyle Hidden -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\Specialize.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>4</Order>
					<Path>powershell.exe -WindowStyle Hidden -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\DefaultUser.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>5</Order>
					<Path>reg.exe unload "HKU\DefaultUser"</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
	</settings>
	<settings pass="auditSystem"></settings>
	<settings pass="auditUser"></settings>
	<settings pass="oobeSystem">
		<component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<InputLocale>0809:00000809</InputLocale>
			<SystemLocale>en-GB</SystemLocale>
			<UILanguage>en-US</UILanguage>
			<UserLocale>en-GB</UserLocale>
		</component>
		<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<UserAccounts>
				<LocalAccounts>
					<LocalAccount wcm:action="add">
						<Name>Pentest</Name>
						<DisplayName></DisplayName>
						<Group>Administrators</Group>
						<Password>
							<Value></Value>
							<PlainText>true</PlainText>
						</Password>
					</LocalAccount>
				</LocalAccounts>
			</UserAccounts>
			<AutoLogon>
				<Username>Pentest</Username>
				<Enabled>true</Enabled>
				<LogonCount>1</LogonCount>
				<Password>
					<Value></Value>
					<PlainText>true</PlainText>
				</Password>
			</AutoLogon>
			<OOBE>
				<ProtectYourPC>3</ProtectYourPC>
				<HideEULAPage>true</HideEULAPage>
				<HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
				<HideOnlineAccountScreens>false</HideOnlineAccountScreens>
			</OOBE>
			<FirstLogonCommands>
				<SynchronousCommand wcm:action="add">
					<Order>1</Order>
					<CommandLine>powershell.exe -WindowStyle Hidden -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\FirstLogon.ps1' -Raw | Invoke-Expression;"</CommandLine>
				</SynchronousCommand>
			</FirstLogonCommands>
		</component>
	</settings>
	<Extensions xmlns="https://schneegans.de/windows/unattend-generator/">
		<ExtractScript>
param(
    [xml] $Document
);

foreach( $file in $Document.unattend.Extensions.File ) {
    $path = [System.Environment]::ExpandEnvironmentVariables( $file.GetAttribute( 'path' ) );
    mkdir -Path( $path | Split-Path -Parent ) -ErrorAction 'SilentlyContinue';
    $encoding = switch( [System.IO.Path]::GetExtension( $path ) ) {
        { $_ -in '.ps1', '.xml' } { [System.Text.Encoding]::UTF8; }
        { $_ -in '.reg', '.vbs', '.js' } { [System.Text.UnicodeEncoding]::new( $false, $true ); }
        default { [System.Text.Encoding]::Default; }
    };
    $bytes = $encoding.GetPreamble() + $encoding.GetBytes( $file.InnerText.Trim() );
    [System.IO.File]::WriteAllBytes( $path, $bytes );
}
		</ExtractScript>
		<File path="C:\Windows\Setup\Scripts\GetComputerName.ps1">
return 'PENTEST-{0:D3}' -f ( Get-Random -Minimum 0 -Maximum 999 );
		</File>
		<File path="C:\Windows\Setup\Scripts\SetComputerName.ps1">
$ErrorActionPreference = 'Stop';
Set-StrictMode -Version 'Latest';
&amp; {
	$newName = ( Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\ComputerName.txt' -Raw ).Trim();
	if( [string]::IsNullOrWhitespace( $newName ) ) {
		throw "No computer name was provided.";
	}

	$keys = @(
		@{
			LiteralPath = 'Registry::HKLM\SYSTEM\CurrentControlSet\Control\ComputerName\ComputerName';
			Name = 'ComputerName';
		};
		@{
			LiteralPath = 'Registry::HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters';
			Name = 'Hostname';
		};
		@{
			LiteralPath = 'Registry::HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters';
			Name = 'NV Hostname';
		};
	);

	while( $true ) {
		foreach( $key in $keys ) {
			Set-ItemProperty @key -Type 'String' -Value $newName;
		}
		Start-Sleep -Milliseconds 50;
	}
} *&gt;&amp;1 &gt;&gt; 'C:\Windows\Setup\Scripts\SetComputerName.log';
		</File>
		<File path="C:\Windows\Setup\Scripts\RemovePackages.ps1">
$selectors = @(
	'Microsoft.Microsoft3DViewer';
	'Microsoft.BingSearch';
	'Microsoft.WindowsCalculator';
	'Microsoft.WindowsCamera';
	'Clipchamp.Clipchamp';
	'Microsoft.WindowsAlarms';
	'Microsoft.549981C3F5F10';
	'Microsoft.Windows.DevHome';
	'MicrosoftCorporationII.MicrosoftFamily';
	'Microsoft.WindowsFeedbackHub';
	'Microsoft.Edge.GameAssist';
	'Microsoft.GetHelp';
	'Microsoft.Getstarted';
	'microsoft.windowscommunicationsapps';
	'Microsoft.WindowsMaps';
	'Microsoft.MixedReality.Portal';
	'Microsoft.BingNews';
	'Microsoft.WindowsNotepad';
	'Microsoft.MicrosoftOfficeHub';
	'Microsoft.Office.OneNote';
	'Microsoft.OutlookForWindows';
	'Microsoft.Paint';
	'Microsoft.MSPaint';
	'Microsoft.People';
	'Microsoft.Windows.Photos';
	'Microsoft.PowerAutomateDesktop';
	'MicrosoftCorporationII.QuickAssist';
	'Microsoft.SkypeApp';
	'Microsoft.ScreenSketch';
	'Microsoft.MicrosoftSolitaireCollection';
	'Microsoft.MicrosoftStickyNotes';
	'MicrosoftTeams';
	'MSTeams';
	'Microsoft.Todos';
	'Microsoft.WindowsSoundRecorder';
	'Microsoft.Wallet';
	'Microsoft.BingWeather';
	'Microsoft.Xbox.TCUI';
	'Microsoft.XboxApp';
	'Microsoft.XboxGameOverlay';
	'Microsoft.XboxGamingOverlay';
	'Microsoft.XboxIdentityProvider';
	'Microsoft.XboxSpeechToTextOverlay';
	'Microsoft.GamingApp';
	'Microsoft.YourPhone';
	'Microsoft.ZuneMusic';
	'Microsoft.ZuneVideo';
);
$getCommand = {
  Get-AppxProvisionedPackage -Online;
};
$filterCommand = {
  $_.DisplayName -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Remove-AppxProvisionedPackage -AllUsers -Online -ErrorAction 'Continue';
  }
};
$type = 'Package';
$logfile = 'C:\Windows\Setup\Scripts\RemovePackages.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\RemoveCapabilities.ps1">
$selectors = @(
	'Print.Fax.Scan';
	'Language.Handwriting';
	'Browser.InternetExplorer';
	'MathRecognizer';
	'OneCoreUAP.OneSync';
	'Microsoft.Windows.MSPaint';
	'Microsoft.Windows.PowerShell.ISE';
	'App.Support.QuickAssist';
	'Microsoft.Windows.SnippingTool';
	'Language.Speech';
	'Language.TextToSpeech';
	'App.StepsRecorder';
	'Hello.Face.18967';
	'Hello.Face.Migration.18967';
	'Hello.Face.20134';
	'Media.WindowsMediaPlayer';
	'Microsoft.Windows.WordPad';
);
$getCommand = {
  Get-WindowsCapability -Online | Where-Object -Property 'State' -NotIn -Value @(
    'NotPresent';
    'Removed';
  );
};
$filterCommand = {
  ($_.Name -split '~')[0] -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Remove-WindowsCapability -Online -ErrorAction 'Continue';
  }
};
$type = 'Capability';
$logfile = 'C:\Windows\Setup\Scripts\RemoveCapabilities.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\RemoveFeatures.ps1">
$selectors = @(
	'MediaPlayback';
	'MicrosoftWindowsPowerShellV2Root';
	'Recall';
	'Microsoft-SnippingTool';
);
$getCommand = {
  Get-WindowsOptionalFeature -Online | Where-Object -Property 'State' -NotIn -Value @(
    'Disabled';
    'DisabledWithPayloadRemoved';
  );
};
$filterCommand = {
  $_.FeatureName -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Disable-WindowsOptionalFeature -Online -Remove -NoRestart -ErrorAction 'Continue';
  }
};
$type = 'Feature';
$logfile = 'C:\Windows\Setup\Scripts\RemoveFeatures.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\TaskbarLayoutModification.xml">
&lt;LayoutModificationTemplate xmlns="http://schemas.microsoft.com/Start/2014/LayoutModification" xmlns:defaultlayout="http://schemas.microsoft.com/Start/2014/FullDefaultLayout" xmlns:start="http://schemas.microsoft.com/Start/2014/StartLayout" xmlns:taskbar="http://schemas.microsoft.com/Start/2014/TaskbarLayout" Version="1"&gt;
	&lt;CustomTaskbarLayoutCollection PinListPlacement="Replace"&gt;
		&lt;defaultlayout:TaskbarLayout&gt;
			&lt;taskbar:TaskbarPinList&gt;
				&lt;taskbar:DesktopApp DesktopApplicationID="Microsoft.Windows.Explorer" /&gt;
				&lt;taskbar:UWA AppUserModelID="Microsoft.MicrosoftEdge_8wekyb3d8bbwe!MicrosoftEdge" /&gt;
				&lt;taskbar:UWA AppUserModelID="windows.immersivecontrolpanel_cw5n1h2txyewy!microsoft.windows.immersivecontrolpanel" /&gt;
			&lt;/taskbar:TaskbarPinList&gt;
		&lt;/defaultlayout:TaskbarLayout&gt;
	&lt;/CustomTaskbarLayoutCollection&gt;
&lt;/LayoutModificationTemplate&gt;
		</File>
		<File path="C:\Windows\Setup\Scripts\UnlockStartLayout.vbs">
HKU = &amp;H80000003
Set reg = GetObject("winmgmts://./root/default:StdRegProv")
Set fso = CreateObject("Scripting.FileSystemObject")

If reg.EnumKey(HKU, "", sids) = 0 Then
	If Not IsNull(sids) Then
		For Each sid In sids
			key = sid + "\Software\Policies\Microsoft\Windows\Explorer"
			name = "LockedStartLayout"
			If reg.GetDWORDValue(HKU, key, name, existing) = 0 Then
				reg.SetDWORDValue HKU, key, name, 0
			End If
		Next
	End If
End If
		</File>
		<File path="C:\Windows\Setup\Scripts\UnlockStartLayout.xml">
&lt;Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"&gt;
	&lt;Triggers&gt;
		&lt;EventTrigger&gt;
			&lt;Enabled&gt;true&lt;/Enabled&gt;
			&lt;Subscription&gt;&amp;lt;QueryList&amp;gt;&amp;lt;Query Id="0" Path="Application"&amp;gt;&amp;lt;Select Path="Application"&amp;gt;*[System[Provider[@Name='UnattendGenerator'] and EventID=1]]&amp;lt;/Select&amp;gt;&amp;lt;/Query&amp;gt;&amp;lt;/QueryList&amp;gt;&lt;/Subscription&gt;
		&lt;/EventTrigger&gt;
	&lt;/Triggers&gt;
	&lt;Principals&gt;
		&lt;Principal id="Author"&gt;
			&lt;UserId&gt;S-1-5-18&lt;/UserId&gt;
			&lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;
		&lt;/Principal&gt;
	&lt;/Principals&gt;
	&lt;Settings&gt;
		&lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;
		&lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;
		&lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;
		&lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;
		&lt;StartWhenAvailable&gt;false&lt;/StartWhenAvailable&gt;
		&lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;
		&lt;IdleSettings&gt;
			&lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;
			&lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;
		&lt;/IdleSettings&gt;
		&lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;
		&lt;Enabled&gt;true&lt;/Enabled&gt;
		&lt;Hidden&gt;false&lt;/Hidden&gt;
		&lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;
		&lt;WakeToRun&gt;false&lt;/WakeToRun&gt;
		&lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;
		&lt;Priority&gt;7&lt;/Priority&gt;
	&lt;/Settings&gt;
	&lt;Actions Context="Author"&gt;
		&lt;Exec&gt;
			&lt;Command&gt;C:\Windows\System32\wscript.exe&lt;/Command&gt;
			&lt;Arguments&gt;C:\Windows\Setup\Scripts\UnlockStartLayout.vbs&lt;/Arguments&gt;
		&lt;/Exec&gt;
	&lt;/Actions&gt;
&lt;/Task&gt;
		</File>
		<File path="C:\Windows\Setup\Scripts\TurnOffSystemSounds.ps1">
$excludes = Get-ChildItem -LiteralPath 'Registry::HKU\DefaultUser\AppEvents\EventLabels' |
    Where-Object -FilterScript { ($_ | Get-ItemProperty).ExcludeFromCPL -eq 1; } |
    Select-Object -ExpandProperty 'PSChildName';
Get-ChildItem -Path 'Registry::HKU\DefaultUser\AppEvents\Schemes\Apps\*\*' |
    Where-Object -Property 'PSChildName' -NotIn $excludes |
    Get-ChildItem -Include '.Current' | Set-ItemProperty -Name '(Default)' -Value '';
		</File>
		<File path="C:\Windows\Setup\Scripts\SetStartPins.ps1">
$json = '{"pinnedList":[]}';
if( [System.Environment]::OSVersion.Version.Build -lt 20000 ) {
	return;
}
$key = 'Registry::HKLM\SOFTWARE\Microsoft\PolicyManager\current\device\Start';
New-Item -Path $key -ItemType 'Directory' -ErrorAction 'SilentlyContinue';
Set-ItemProperty -LiteralPath $key -Name 'ConfigureStartPins' -Value $json -Type 'String';
		</File>
		<File path="C:\Windows\Setup\Scripts\SetColorTheme.ps1">
$lightThemeSystem = 0;
$lightThemeApps = 0;
$accentColorOnStart = 1;
$enableTransparency = 0;
$htmlAccentColor = '#1C9ED3';
&amp; {
	$params = @{
		LiteralPath = 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize';
		Force = $true;
		Type = 'DWord';
	};
	Set-ItemProperty @params -Name 'SystemUsesLightTheme' -Value $lightThemeSystem;
	Set-ItemProperty @params -Name 'AppsUseLightTheme' -Value $lightThemeApps;
	Set-ItemProperty @params -Name 'ColorPrevalence' -Value $accentColorOnStart;
	Set-ItemProperty @params -Name 'EnableTransparency' -Value $enableTransparency;
};
&amp; {
	Add-Type -AssemblyName 'System.Drawing';
	$accentColor = [System.Drawing.ColorTranslator]::FromHtml( $htmlAccentColor );

	function ConvertTo-DWord {
		param(
			[System.Drawing.Color]
			$Color
		);
						
		[byte[]] $bytes = @(
			$Color.R;
			$Color.G;
			$Color.B;
			$Color.A;
		);
		return [System.BitConverter]::ToUInt32( $bytes, 0); 
	}

	$startColor = [System.Drawing.Color]::FromArgb( 0xD2, $accentColor );
	Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent' -Name 'StartColorMenu' -Value( ConvertTo-DWord -Color $accentColor ) -Type 'DWord' -Force;
	Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent' -Name 'AccentColorMenu' -Value( ConvertTo-DWord -Color $accentColor ) -Type 'DWord' -Force;
	Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\DWM' -Name 'AccentColor' -Value( ConvertTo-DWord -Color $accentColor ) -Type 'DWord' -Force;
	$params = @{
		LiteralPath = 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent';
		Name = 'AccentPalette';
	};
	$palette = Get-ItemPropertyValue @params;
	$index = 20;
	$palette[ $index++ ] = $accentColor.R;
	$palette[ $index++ ] = $accentColor.G;
	$palette[ $index++ ] = $accentColor.B;
	$palette[ $index++ ] = $accentColor.A;
	Set-ItemProperty @params -Value $palette -Type 'Binary' -Force;
};
		</File>
		<File path="C:\Windows\Setup\Scripts\SetWallpaper.ps1">
Add-Type -TypeDefinition '
	using System.Drawing;
	using System.Runtime.InteropServices;
	
	public static class WallpaperSetter {
		[DllImport("user32.dll")]
		private static extern bool SetSysColors(
			int cElements, 
			int[] lpaElements,
			int[] lpaRgbValues
		);

		[DllImport("user32.dll")]
		private static extern bool SystemParametersInfo(
			uint uiAction,
			uint uiParam,
			string pvParam,
			uint fWinIni
		);

		public static void SetDesktopBackground(Color color) {
			SystemParametersInfo(20, 0, "", 0);
			SetSysColors(1, new int[] { 1 }, new int[] { ColorTranslator.ToWin32(color) });
		}

		public static void SetDesktopImage(string file) {
			SystemParametersInfo(20, 0, file, 0);
		}
	}
' -ReferencedAssemblies 'System.Drawing';

function Set-WallpaperColor {
	param(
		[string]
		$HtmlColor
	);

	$color = [System.Drawing.ColorTranslator]::FromHtml( $HtmlColor );
	[WallpaperSetter]::SetDesktopBackground( $color );
	Set-ItemProperty -Path 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers' -Name 'BackgroundType' -Type 'DWord' -Value 1 -Force;
	Set-ItemProperty -Path 'Registry::HKCU\Control Panel\Desktop' -Name 'WallPaper' -Type 'String' -Value '' -Force;
	Set-ItemProperty -Path 'Registry::HKCU\Control Panel\Colors' -Name 'Background' -Type 'String' -Value "$($color.R) $($color.G) $($color.B)" -Force;
}

function Set-WallpaperImage {
	param(
		[string]
		$LiteralPath
	);

	if( $LiteralPath | Test-Path ) {
		[WallpaperSetter]::SetDesktopImage( $LiteralPath );
		Set-ItemProperty -Path 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers' -Name 'BackgroundType' -Type 'DWord' -Value 0 -Force;
		Set-ItemProperty -Path 'Registry::HKCU\Control Panel\Desktop' -Name 'WallPaper' -Type 'String' -Value $LiteralPath -Force;
	} else {
		"Cannot use '$LiteralPath' as a desktop wallpaper because that file does not exist.";
	}
}
Set-WallpaperColor -HtmlColor '#002A30';
		</File>
		<File path="C:\Windows\Setup\Scripts\unattend-01.ps1">
# Create directory stucture
$logs_directory = New-Item -Path "$env:USERPROFILE\Desktop" -Name "Build Logs" -ItemType Directory
$logs = New-Item -Path $logs_directory -Name logs.txt -ItemType File
$winget_logs = New-Item -Path $logs_directory -Name winget.txt -ItemType File
$docker_logs = New-Item -Path $logs_directory -Name docker.txt -ItemType File
$github_logs = New-Item -Path $logs_directory -Name github.txt -ItemType File
$powershell_logs = New-Item -Path $logs_directory -Name powershell.txt -ItemType File
$capabilities_logs = New-Item -Path $logs_directory -Name capabilities.txt -ItemType File

$job_directory = New-Item -Path "$env:USERPROFILE\Desktop" -Name Job -ItemType Directory
$phase_directory = New-Item -Path $job_directory -Name PhaseName -ItemType Directory
New-Item -Path $phase_directory -Name Docs -ItemType Directory
New-Item -Path $phase_directory -Name Evidence -ItemType Directory
New-Item -Path $phase_directory -Name Output -ItemType Directory
New-Item -Path $phase_directory -Name scribe.txt -ItemType File
New-Item -Path $phase_directory -Name notes.txt -ItemType File
New-Item -Path $phase_directory -Name vulnerabilities.txt -ItemType File

$tools_directory = New-Item -Path "$env:USERPROFILE\Desktop" -Name Tools -ItemType Directory
$config = New-Item -Path $tools_directory -Name Config -ItemType Directory
$evasion = New-Item -Path $tools_directory -Name Evasion -ItemType Directory
$windows = New-Item -Path $tools_directory -Name Windows -ItemType Directory
$active_directory = New-Item -Path $tools_directory -Name "Active Directory" -ItemType Directory
$network = New-Item -Path $tools_directory -Name Network -ItemType Directory
$kubernetes = New-Item -Path $tools_directory -Name Kubernetes -ItemType Directory
$azure = New-Item -Path $tools_directory -Name Azure -ItemType Directory

$winget_applications = @{
    "OffSec.KaliLinux" = ""
    "Microsoft.VisualStudio.2022.Community" = "--quiet --wait --norestart --add Microsoft.VisualStudio.Workload.ManagedDesktop --add Microsoft.Net.Component.4.5.TargetingPack --add Microsoft.Net.Component.4.5.1.TargetingPack --add Microsoft.Net.Component.4.5.2.TargetingPack --add Microsoft.Net.Component.4.6.TargetingPack --add Microsoft.Net.Component.4.6.1.TargetingPack --add Microsoft.Net.Component.4.6.2.TargetingPack --add Microsoft.Net.Component.4.7.TargetingPack --add Microsoft.Net.Component.4.7.1.TargetingPack --add Microsoft.Net.Component.4.7.2.TargetingPack --add Microsoft.Net.Component.4.8.TargetingPack"
    "Microsoft.VisualStudioCode" = ""
    "Microsoft.Sysinternals.Suite" = ""
    "Microsoft.Office" = ""
    "Microsoft.AzureCLI" = ""
    "Microsoft.Azure.StorageExplorer" = ""
    "WireGuard.WireGuard" = ""
    "7zip.7zip" = ""
    "Git.Git" = ""
    "Python.Python.3.13" = ""
    "OpenJS.NodeJS" = ""
    "GoLang.Go" = ""
    "jqlang.jq" = ""
    "Greenshot.Greenshot" = ""
    "mRemoteNG.mRemoteNG" = ""
    "PortSwigger.BurpSuite.Professional" = ""
    "Tenable.Nessus" = ""
    "WiresharkFoundation.Wireshark" = ""
    "Insecure.Nmap" = ""
    "Oracle.VirtualBox" = ""
    "Insomnia.Insomnia" = ""
    "Spotify.Spotify" = ""
}

$docker_applications = @(
    "postgres:16",
    "neo4j:4.4",
    "specterops/bloodhound",
    "projectdiscovery/nuclei",
    "blacklanternsecurity/bbot",
    "ghcr.io/gchq/cyberchef"
)

$github_repositories = @{
    "https://github.com/jake73345634634/Configs" = "$config\Configs"
    "https://github.com/h4wkst3r/InvisibilityCloak" = "$evasion\InvisibilityCloak"
    "https://github.com/0xb11a1/yetAnotherObfuscator" = "$evasion\yetAnotherObfuscator"
    "https://github.com/gentilkiwi/mimikatz" = "$windows\mimikatz"
    "https://github.com/GhostPack/Rubeus" = "$windows\Rubeus"
    "https://github.com/GhostPack/Seatbelt" = "$windows\Seatbelt"
    "https://github.com/SpecterOps/AzureHound" = "$azure\AzureHound"
    "https://github.com/SpecterOps/SharpHound" = "$active_directory\SharpHound"
    "https://github.com/g0h4n/RustHound-CE" = "$active_directory\RustHound-CE"
    "https://github.com/ly4k/Certipy" = "$active_directory\Certipy"
    "https://github.com/CravateRouge/bloodyAD" = "$active_directory\bloodyAD"
    "https://github.com/PlumHound/PlumHound" = "$active_directory\PlumHound"
    "https://github.com/zeronetworks/BlueHound" = "$active_directory\BlueHound"
    "https://github.com/EvotecIT/GPOZaurr" = "$active_directory\GPOZaurr"
    "https://github.com/techspence/ScriptSentry" = "$active_directory\ScriptSentry"
    "https://github.com/projectdiscovery/nuclei-templates" = "$network\nuclei-templates"
    "https://github.com/jake73345634634/Kubernetes-RBAC-Audit" = "$kubernetes\Kubernetes-RBAC-Audit"
}

$applications = @(

)

$powershell_modules = @(
    "Invoke-ArgFuscator",
    "AADInternals"
)

$windows_capabilities = @(
    "Rsat.ActiveDirectory.DS-LDS.Tools~~~~0.0.1.0"
)

# Create "shortcuts" for services
"docker compose -f $config\Configs\bloodhound-docker-compose.yml -p bloodhound up -d" | Out-File -FilePath "$env:USERPROFILE\Desktop\Bloodhound.bat" -Encoding Ascii
"docker run -d -p 10001:80 ghcr.io/gchq/cyberchef" | Out-File -FilePath "$env:USERPROFILE\Desktop\CyberChef.bat" -Encoding Ascii

# Create bookmarks
$favourites = @{
    toplevel_name = "Tools"
},
@{
    name = "BloodHound"
    url = "http://localhost:10000"
},
@{
    name = "Nessus"
    url = "https://localhost:8834"
} | ConvertTo-JSON -Depth 4 -Compress

$settings = 
[PSCustomObject]@{
    Path  = "SOFTWARE\Policies\Microsoft\Edge"
    Value = $favourites
    Name  = "ManagedFavorites"
} | Group-Object Path

ForEach ($setting in $settings) {
    $registry = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey($setting.Name, $true)

    If ($null -eq $registry) {
        $registry = [Microsoft.Win32.Registry]::LocalMachine.CreateSubKey($setting.Name, $true)
    }

    $setting.Group | ForEach-Object {
        $registry.SetValue($_.name, $_.value)
    }

    $registry.Dispose()
}

$settings = 
[PSCustomObject]@{
    Path  = "SOFTWARE\Policies\Microsoft\Edge"
    Value = 0
    Name  = "ImportFavorites"
} | Group-Object Path

ForEach ($setting in $settings) {
    $registry = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey($setting.Name, $true)

    if ($null -eq $registry) {
        $registry = [Microsoft.Win32.Registry]::LocalMachine.CreateSubKey($setting.Name, $true)
    }

    $setting.Group | ForEach-Object {
        $registry.SetValue($_.name, $_.value)
    }

    $registry.Dispose()
}

# Check compatibility
If ([System.Environment]::OSVersion.Version.Build -lt 26100) {
    "[!] Windows 11 24H2 or later is required." | Out-File -FilePath $logs -Append -Encoding Ascii

    Return
}

# Change behaviour when closing the lid
powercfg.exe /setACvalueIndex scheme_current sub_buttons lidAction 0
powercfg.exe /setDCvalueIndex scheme_current sub_buttons lidAction 0
powercfg.exe /setActive scheme_current

# Add Defender exclusions
Add-MpPreference -ExclusionPath $job_directory
Add-MpPreference -ExclusionPath $tools_directory

# Install PowerShell modules
Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Scope CurrentUser
Set-PSRepository -Name PSGallery -InstallationPolicy Trusted

$powershell_modules | ForEach-Object {
    Install-Module -Name $_ -Scope CurrentUser | Out-File -FilePath $powershell_logs -Append -Encoding Ascii
}

# Install Windows capabilities
$windows_capabilities | ForEach-Object {
    Add-WindowsCapability -Name $_ -Online | Out-File -FilePath $capabilities_logs -Append -Encoding Ascii
}

# Setup WinGet
$winget_timeout = [datetime]::Now.AddMinutes(5)
$winget_exe = "$env:LOCALAPPDATA\Microsoft\WindowsApps\winget.exe"
$winget_exists = $true

While ($true) {
    If ($winget_exe | Test-Path) {
        Break
    }

    If ([datetime]::Now -gt $winget_timeout) {
        $winget_exists = $false
        "[!] WinGet application does not exist." | Out-File -FilePath $winget_logs -Append -Encoding Ascii

        Break
    }

    Start-Sleep -Seconds 1
}

If ($winget_exists) {
    $winget_applications.GetEnumerator() | ForEach-Object {
        "[*] WinGet: $($_.Name) $($_.Value)" | Out-File -FilePath $winget_logs -Append -Encoding Ascii

        $arguments = @(
            "install",
            "--exact",
            "--id", "$($_.Name)",
            "--silent",
            "--accept-package-agreements",
            "--accept-source-agreements",
            "--source", "winget"
        )

        If ($_.Value -ne "") {
            $arguments += @("--override", "$($_.Value)")
        }

        &amp; $winget_exe @arguments | Out-File -FilePath $winget_logs -Append -Encoding Ascii
    }
}

# Activate Windows and Office
&amp; ([ScriptBlock]::Create((Invoke-RestMethod -Uri https://get.activated.win))) /HWID /Ohook

# Install GitHub repositories
$git_exe = "$env:ProgramFiles\Git\cmd\git.exe"

$github_repositories.GetEnumerator() | ForEach-Object {
    "[*] GitHub: $($_.Name)" | Out-File -FilePath $github_logs -Append -Encoding Ascii

    &amp; $git_exe clone $_.Name $_.Value | Out-File -FilePath $github_logs -Append -Encoding Ascii
}

# Install WSL
wsl --install

# Install Docker
$docker_applications | ForEach-Object { "$_" } | Out-File -FilePath $env:SystemRoot\Setup\Scripts\DockerApplications.txt -Append -Encoding Ascii

@'
$docker_uri = [uri]::New("https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe")
$docker_installer = "$env:TEMP\{0}" -f $docker_uri.Segments[-1]
[System.Net.WebClient]::New().DownloadFile($docker_uri, $docker_installer)
Start-Process -FilePath $docker_installer -ArgumentList "install", "--quiet", "--accept-license" -Wait
Remove-Item -LiteralPath $docker_installer -ErrorAction "SilentlyContinue"

$docker_timeout = [datetime]::Now.AddMinutes(5)
$docker_desktop_exe = "$env:ProgramFiles\Docker\Docker\Docker Desktop.exe"

While ($true) {
    If ($docker_desktop_exe | Test-Path) {
        Start-Process -FilePath $docker_desktop_exe -WindowStyle Hidden

        Break
    }

    If ([datetime]::Now -gt $docker_timeout) {
        "File {0} does not exist." -f $docker_desktop_exe | Write-Warning

        Return
    }

    Start-Sleep -Seconds 1
}

$docker_engine_ready_timeout = [datetime]::Now.AddMinutes(5)
$docker_exe = "$env:ProgramFiles\Docker\Docker\resources\bin\docker.exe"

$docker_tmp_file = "$env:USERPROFILE\Desktop\info.txt"

While ($true) {
    Try {
        &amp; $docker_exe info | Out-File -FilePath $docker_tmp_file -Append -Encoding Ascii

        $docker_ready_indicator = Get-Content -Path $docker_tmp_file -Raw

        If ($docker_ready_indicator -match "Name: docker-desktop") {
            Break
        }
    } Catch {
        "Failed to run Docker" | Out-File -FilePath $env:USERPROFILE\Desktop\errors.txt -Append -Encoding Ascii
        $_ | Out-File -FilePath $env:USERPROFILE\Desktop\errors.txt -Append -Encoding Ascii
    }

    If ([datetime]::Now -gt $docker_engine_ready_timeout) {
        "Failed to initialise Docker" | Out-File -FilePath $env:USERPROFILE\Desktop\errors.txt -Append -Encoding Ascii

        Return
    }

    Start-Sleep -Seconds 1
}

Get-Content -Path $env:SystemRoot\Setup\Scripts\DockerApplications.txt | ForEach-Object {
    "[*] Docker: $_" | Out-File -FilePath "$env:USERPROFILE\Desktop\Build Logs\docker.txt" -Append -Encoding Ascii

    &amp; $docker_exe pull $_ | Out-File -FilePath "$env:USERPROFILE\Desktop\Build Logs\docker.txt" -Append -Encoding Ascii
}

## ------- ##
## CLEANUP ##
## ------- ##

Remove-Item -Path $env:PUBLIC\Desktop\*
Remove-Item -Path "$env:USERPROFILE\Desktop\Docker Desktop.lnk"
Remove-Item -Path "$env:USERPROFILE\Desktop\Insomnia.lnk"

Remove-Item -Path $docker_tmp_file

New-Item -Path $env:USERPROFILE\Desktop -Name SetupComplete.txt -ItemType File

Restart-Computer -Force

'@ | Out-File -FilePath $env:SystemRoot\Setup\Scripts\DockerInstall.ps1 -Append -Encoding Ascii

New-ItemProperty -Path "HKCU:Software\Microsoft\Windows\CurrentVersion\RunOnce" -Name DockerInstall -Value "powershell -File $env:SystemRoot\Setup\Scripts\DockerInstall.ps1"

Restart-Computer -Force
		</File>
		<File path="C:\Windows\Setup\Scripts\Specialize.ps1">
$scripts = @(
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\GetComputerName.ps1' -Raw | Invoke-Expression &gt; 'C:\Windows\Setup\Scripts\ComputerName.txt';
		Start-Process -FilePath ( Get-Process -Id $PID ).Path -ArgumentList '-NoProfile', '-Command', 'Get-Content -LiteralPath "C:\Windows\Setup\Scripts\SetComputerName.ps1" -Raw | Invoke-Expression;' -WindowStyle 'Hidden';
		Start-Sleep -Seconds 10;
	};
	{
		reg.exe add "HKLM\SYSTEM\Setup\MoSetup" /v AllowUpgradesWithUnsupportedTPMOrCPU /t REG_DWORD /d 1 /f;
	};
	{
		Remove-Item -LiteralPath 'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\DevHomeUpdate' -Force -ErrorAction 'SilentlyContinue';
	};
	{
		reg.exe add "HKCR\.txt\ShellNew" /v ItemName /t REG_EXPAND_SZ /d "@C:\Windows\system32\notepad.exe,-470" /f;
		reg.exe add "HKCR\.txt\ShellNew" /v NullFile /t REG_SZ /f;
		reg.exe add "HKCR\txtfilelegacy" /v FriendlyTypeName /t REG_EXPAND_SZ /d "@C:\Windows\system32\notepad.exe,-469" /f;
		reg.exe add "HKCR\txtfilelegacy" /ve /t REG_SZ /d "Text Document" /f;
	};
	{
		Remove-Item -LiteralPath 'C:\Users\Default\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneDrive.lnk', 'C:\Windows\System32\OneDriveSetup.exe', 'C:\Windows\SysWOW64\OneDriveSetup.exe' -ErrorAction 'Continue';
	};
	{
		Remove-Item -LiteralPath 'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\OutlookUpdate' -Force -ErrorAction 'SilentlyContinue';
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Communications" /v ConfigureChatAutoInstall /t REG_DWORD /d 0 /f;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemovePackages.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemoveCapabilities.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemoveFeatures.ps1' -Raw | Invoke-Expression;
	};
	{
		net.exe accounts /maxpwage:UNLIMITED;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Windows\CloudContent" /v "DisableCloudOptimizedContent" /t REG_DWORD /d 1 /f;
		[System.Diagnostics.EventLog]::CreateEventSource( 'UnattendGenerator', 'Application' );
	};
	{
		Register-ScheduledTask -TaskName 'UnlockStartLayout' -Xml $( Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\UnlockStartLayout.xml' -Raw );
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v SmartScreenEnabled /t REG_SZ /d "Off" /f;
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WTDS\Components" /v ServiceEnabled /t REG_DWORD /d 0 /f;
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WTDS\Components" /v NotifyMalicious /t REG_DWORD /d 0 /f;
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WTDS\Components" /v NotifyPasswordReuse /t REG_DWORD /d 0 /f;
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WTDS\Components" /v NotifyUnsafeApp /t REG_DWORD /d 0 /f;
		reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\Systray" /v HideSystray /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v EnableLUA /t REG_DWORD /d 0 /f
	};
	{
		reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\FileSystem" /v LongPathsEnabled /t REG_DWORD /d 1 /f
	};
	{
		icacls.exe C:\ /remove:g "*S-1-5-11"
	};
	{
		auditpol.exe /set /subcategory:"{0CCE922B-69AE-11D9-BED3-505054503030}" /success:enable /failure:enable;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\Audit" /v ProcessCreationIncludeCmdLine_Enabled /t REG_DWORD /d 1 /f;
	};
	{
		Set-ExecutionPolicy -Scope 'LocalMachine' -ExecutionPolicy 'RemoteSigned' -Force;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Dsh" /v AllowNewsAndInterests /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI\BootAnimation" /v DisableStartupSound /t REG_DWORD /d 1 /f;
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\EditionOverrides" /v UserSetting_DisableStartupSound /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Windows\CloudContent" /v "DisableWindowsConsumerFeatures" /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Edge" /v HideFirstRunExperience /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Edge\Recommended" /v BackgroundModeEnabled /t REG_DWORD /d 0 /f;
		reg.exe add "HKLM\Software\Policies\Microsoft\Edge\Recommended" /v StartupBoostEnabled /t REG_DWORD /d 0 /f;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetStartPins.ps1' -Raw | Invoke-Expression;
	};
	{
		reg.exe add "HKU\.DEFAULT\Control Panel\Accessibility\StickyKeys" /v Flags /t REG_SZ /d 10 /f;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to customize your Windows installation. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\Specialize.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\UserOnce.ps1">
$scripts = @(
	{
		Get-AppxPackage -Name 'Microsoft.Windows.Ai.Copilot.Provider' | Remove-AppxPackage;
	};
	{
		[System.Diagnostics.EventLog]::WriteEntry( 'UnattendGenerator', "User '$env:USERNAME' has requested to unlock the Start menu layout.", [System.Diagnostics.EventLogEntryType]::Information, 1 );
	};
	{
		Set-ItemProperty -LiteralPath 'Registry::HKCU\AppEvents\Schemes' -Name '(Default)' -Type 'String' -Value '.None';
	};
	{
		reg.exe add "HKCU\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32" /ve /f;
	};
	{
		Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'LaunchTo' -Type 'DWord' -Value 1;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetColorTheme.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetWallpaper.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Process -Name 'explorer' -ErrorAction 'SilentlyContinue' | Where-Object -FilterScript {
			$_.SessionId -eq ( Get-Process -Id $PID ).SessionId;
		} | Stop-Process -Force;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to configure this user account. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 &gt;&gt; "$env:TEMP\UserOnce.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\DefaultUser.ps1">
$scripts = @(
	{
		reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\WindowsCopilot" /v TurnOffWindowsCopilot /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Internet Explorer\LowRegistry\Audio\PolicyConfig\PropertyStore" /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Notepad" /v ShowStoreBanner /t REG_DWORD /d 0 /f;
	};
	{
		Remove-ItemProperty -LiteralPath 'Registry::HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Run' -Name 'OneDriveSetup' -Force -ErrorAction 'Continue';
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\GameDVR" /v AppCaptureEnabled /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\Explorer" /v "StartLayoutFile" /t REG_SZ /d "C:\Windows\Setup\Scripts\TaskbarLayoutModification.xml" /f;
		reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\Explorer" /v "LockedStartLayout" /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideFileExt" /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Hidden" /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v ShowTaskViewButton /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Edge\SmartScreenEnabled" /ve /t REG_DWORD /d 0 /f;
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Edge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d 0 /f;
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\AppHost" /v EnableWebContentEvaluation /t REG_DWORD /d 0 /f;
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\AppHost" /v PreventOverride /t REG_DWORD /d 0 /f;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\TurnOffSystemSounds.ps1' -Raw | Invoke-Expression;
	};
	{
		$names = @(
		  'ContentDeliveryAllowed';
		  'FeatureManagementEnabled';
		  'OEMPreInstalledAppsEnabled';
		  'PreInstalledAppsEnabled';
		  'PreInstalledAppsEverEnabled';
		  'SilentInstalledAppsEnabled';
		  'SoftLandingEnabled';
		  'SubscribedContentEnabled';
		  'SubscribedContent-310093Enabled';
		  'SubscribedContent-338387Enabled';
		  'SubscribedContent-338388Enabled';
		  'SubscribedContent-338389Enabled';
		  'SubscribedContent-338393Enabled';
		  'SubscribedContent-353694Enabled';
		  'SubscribedContent-353696Enabled';
		  'SubscribedContent-353698Enabled';
		  'SystemPaneSuggestionsEnabled';
		);
		
		foreach( $name in $names ) {
		  reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v $name /t REG_DWORD /d 0 /f;
		}
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v TaskbarAl /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\Explorer" /v DisableSearchBoxSuggestions /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced\TaskbarDeveloperSettings" /v TaskbarEndTask /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Control Panel\Accessibility\StickyKeys" /v Flags /t REG_SZ /d 10 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\DWM" /v ColorPrevalence /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\RunOnce" /v "UnattendedSetup" /t REG_SZ /d "powershell.exe -WindowStyle Hidden -NoProfile -Command \""Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\UserOnce.ps1' -Raw | Invoke-Expression;\""" /f;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to modify the default user&#x2019;&#x2019;s registry hive. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\DefaultUser.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\FirstLogon.ps1">
$scripts = @(
	{
		Set-ItemProperty -LiteralPath 'Registry::HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name 'AutoLogonCount' -Type 'DWord' -Force -Value 0;
	};
	{
		cmd.exe /c "rmdir C:\Windows.old";
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\unattend-01.ps1' -Raw | Invoke-Expression;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to finalize your Windows installation. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 &gt;&gt; "C:\Windows\Setup\Scripts\FirstLogon.log";
		</File>
	</Extensions>
</unattend>
