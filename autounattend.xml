<?xml version="1.0" encoding="utf-8"?>
<unattend xmlns="urn:schemas-microsoft-com:unattend" xmlns:wcm="http://schemas.microsoft.com/WMIConfig/2002/State">
	<!--https://schneegans.de/windows/unattend-generator/?LanguageMode=Unattended&UILanguage=en-US&Locale=en-GB&Keyboard=00000809&GeoLocation=242&ProcessorArchitecture=amd64&BypassRequirementsCheck=true&HidePowerShellWindows=true&ComputerNameMode=Script&ComputerNameScript=return+%27PENTEST-%7B0%3AD3%7D%27+-f+%28+Get-Random+-Minimum+0+-Maximum+999+%29%3B&CompactOsMode=Default&TimeZoneMode=Implicit&PartitionMode=Custom&DiskpartScript=SELECT+DISK%3D0%0D%0ACLEAN%0D%0ACONVERT+GPT%0D%0A%0D%0AREM+WinRE+Partition+%28500MB%2C+with+special+TypeID%29%0D%0ACREATE+PARTITION+PRIMARY+SIZE%3D500%0D%0AFORMAT+QUICK+FS%3DNTFS+LABEL%3D%22WinRE%22%0D%0ASET+ID%3DDE94BBA4-06D1-4D40-A16A-BFD50179D6AC%0D%0AGPT+ATTRIBUTES%3D0x8000000000000001%0D%0A%0D%0AREM+EFI+System+Partition+%28100MB%29%0D%0ACREATE+PARTITION+EFI+SIZE%3D100%0D%0AFORMAT+QUICK+FS%3DFAT32+LABEL%3D%22System%22%0D%0A%0D%0AREM+MSR+%2816MB%29%0D%0ACREATE+PARTITION+MSR+SIZE%3D16%0D%0A%0D%0AREM+Windows+partition+%28remaining+space%29%0D%0ACREATE+PARTITION+PRIMARY%0D%0AFORMAT+QUICK+FS%3DNTFS+LABEL%3D%22Windows%22&InstallToMode=Available&DiskAssertionMode=Skip&WindowsEditionMode=Generic&WindowsEdition=pro&InstallFromMode=Automatic&PEMode=Default&UserAccountMode=Unattended&AccountName0=Pentest&AccountDisplayName0=&AccountPassword0=&AccountGroup0=Administrators&AutoLogonMode=Own&PasswordExpirationMode=Unlimited&LockoutMode=Default&HideFiles=HiddenSystem&ShowFileExtensions=true&ClassicContextMenu=true&LaunchToThisPC=true&ShowEndTask=true&TaskbarSearch=Box&TaskbarIconsMode=Custom&TaskbarIconsXml=%3CLayoutModificationTemplate+xmlns%3D%22http%3A%2F%2Fschemas.microsoft.com%2FStart%2F2014%2FLayoutModification%22+xmlns%3Adefaultlayout%3D%22http%3A%2F%2Fschemas.microsoft.com%2FStart%2F2014%2FFullDefaultLayout%22+xmlns%3Astart%3D%22http%3A%2F%2Fschemas.microsoft.com%2FStart%2F2014%2FStartLayout%22+xmlns%3Ataskbar%3D%22http%3A%2F%2Fschemas.microsoft.com%2FStart%2F2014%2FTaskbarLayout%22+Version%3D%221%22%3E%0D%0A++%3CCustomTaskbarLayoutCollection+PinListPlacement%3D%22Replace%22%3E%0D%0A++++%3Cdefaultlayout%3ATaskbarLayout%3E%0D%0A++++++%3Ctaskbar%3ATaskbarPinList%3E%0D%0A++++++++%3Ctaskbar%3ADesktopApp+DesktopApplicationID%3D%22Microsoft.Windows.Explorer%22+%2F%3E%0D%0A++++++++%3Ctaskbar%3AUWA+AppUserModelID%3D%22Microsoft.MicrosoftEdge_8wekyb3d8bbwe%21MicrosoftEdge%22+%2F%3E%0D%0A++++++++%3Ctaskbar%3AUWA+AppUserModelID%3D%22windows.immersivecontrolpanel_cw5n1h2txyewy%21microsoft.windows.immersivecontrolpanel%22+%2F%3E%0D%0A++++++%3C%2Ftaskbar%3ATaskbarPinList%3E%0D%0A++++%3C%2Fdefaultlayout%3ATaskbarLayout%3E%0D%0A++%3C%2FCustomTaskbarLayoutCollection%3E%0D%0A%3C%2FLayoutModificationTemplate%3E&DisableWidgets=true&LeftTaskbar=true&HideTaskViewButton=true&DisableBingResults=true&StartTilesMode=Default&StartPinsMode=Empty&DisableUac=true&DisableSmartScreen=true&EnableLongPaths=true&HardenSystemDriveAcl=true&AllowPowerShellScripts=true&TurnOffSystemSounds=true&DisableAppSuggestions=true&HideEdgeFre=true&DisableEdgeStartupBoost=true&DeleteWindowsOld=true&ProcessAudit=true&ProcessAuditCommandLine=true&EffectsMode=Default&DesktopIconsMode=Default&StartFoldersMode=Default&WifiMode=Skip&ExpressSettings=DisableAll&LockKeysMode=Skip&StickyKeysMode=Disabled&ColorMode=Custom&SystemColorTheme=Dark&AppsColorTheme=Dark&AccentColor=%231c9ed3&AccentColorOnStart=true&AccentColorOnBorders=true&WallpaperMode=Solid&WallpaperColor=%23002a30&LockScreenMode=Default&Remove3DViewer=true&RemoveBingSearch=true&RemoveCalculator=true&RemoveCamera=true&RemoveClipchamp=true&RemoveClock=true&RemoveCopilot=true&RemoveCortana=true&RemoveDevHome=true&RemoveWindowsHello=true&RemoveFamily=true&RemoveFeedbackHub=true&RemoveGameAssist=true&RemoveGetHelp=true&RemoveHandwriting=true&RemoveInternetExplorer=true&RemoveMailCalendar=true&RemoveMaps=true&RemoveMathInputPanel=true&RemoveMediaFeatures=true&RemoveMixedReality=true&RemoveZuneVideo=true&RemoveNews=true&RemoveNotepad=true&RemoveOffice365=true&RemoveOneDrive=true&RemoveOneNote=true&RemoveOneSync=true&RemoveOutlook=true&RemovePaint=true&RemovePaint3D=true&RemovePeople=true&RemovePhotos=true&RemovePowerAutomate=true&RemovePowerShell2=true&RemovePowerShellISE=true&RemoveQuickAssist=true&RemoveRecall=true&RemoveSkype=true&RemoveSnippingTool=true&RemoveSolitaire=true&RemoveSpeech=true&RemoveStepsRecorder=true&RemoveStickyNotes=true&RemoveTeams=true&RemoveGetStarted=true&RemoveToDo=true&RemoveVoiceRecorder=true&RemoveWallet=true&RemoveWeather=true&RemoveFaxAndScan=true&RemoveWindowsMediaPlayer=true&RemoveZuneMusic=true&RemoveWordPad=true&RemoveXboxApps=true&RemoveYourPhone=true&FirstLogonScript0=%23Requires+-RunAsAdministratorhttps%3A%2F%2Fraw.githubusercontent.com%2Fjake73345634634%2FWin11-Pentest%2Fmain%2FApplications%22%0D%0A%0D%0A%24Config+%3D+%40%7B%0D%0A++++RemoteUrls+%3D+%40%7B%0D%0A++++++++WingetApplications++++%3D+%22%24REMOTE_BASE_URL%2Fwinget.json%22%0D%0A++++++++Containers++++++++++++%3D+%22%24REMOTE_BASE_URL%2Fcontainers.json%22%0D%0A++++++++Repositories++++++++++%3D+%22%24REMOTE_BASE_URL%2Frepositories.json%22%0D%0A++++++++PowerShellModules+++++%3D+%22%24REMOTE_BASE_URL%2Fpowershell_modules.json%22%0D%0A++++++++WindowsCapabilities+++%3D+%22%24REMOTE_BASE_URL%2Fcapabilities.json%22%0D%0A++++++++Files+++++++++++++++++%3D+%22%24REMOTE_BASE_URL%2Ffiles.json%22%0D%0A++++%7D%0D%0A++++Directories+%3D+%40%7B%0D%0A++++++++Desktop+++++++%3D+%22%24env%3AUSERPROFILE%5CDesktop%22%0D%0A++++++++BuildLogs+++++%3D+%22%24env%3AUSERPROFILE%5CDesktop%5CBuild+Logs%22%0D%0A++++++++Job+++++++++++%3D+%22%24env%3AUSERPROFILE%5CDesktop%5CJob%22%0D%0A++++++++Tools+++++++++%3D+%22%24env%3AUSERPROFILE%5CDesktop%5CTools%22%0D%0A++++++++SetupScripts++%3D+%22%24env%3ASystemRoot%5CSetup%5CScripts%22%0D%0A++++%7D%0D%0A++++PowerConfig+%3D+%40%7B%0D%0A++++++++LidActionAC+%3D+0++%23+0+%3D+Do+nothing+when+lid+closes+%28on+AC+power%29%0D%0A++++++++LidActionDC+%3D+0++%23+0+%3D+Do+nothing+when+lid+closes+%28on+battery%29%0D%0A++++%7D%0D%0A++++DefenderExclusions+%3D+%40%28%0D%0A++++++++%22%24env%3AUSERPROFILE%5CDesktop%5CJob%22%0D%0A++++++++%22%24env%3AUSERPROFILE%5CDesktop%5CTools%22%0D%0A++++%29%0D%0A++++EdgeBookmarks+%3D+%40%28%0D%0A++++++++%40%7B+toplevel_name+%3D+%22Tools%22+%7D%0D%0A++++++++%40%7B+name+%3D+%22BloodHound%22%3B+url+%3D+%22http%3A%2F%2Flocalhost%3A10000%22+%7D%0D%0A++++++++%40%7B+name+%3D+%22CyberChef%22%3B+url+%3D+%22http%3A%2F%2Flocalhost%3A10001%22+%7D%0D%0A++++++++%40%7B+name+%3D+%22Nessus%22%3B+url+%3D+%22https%3A%2F%2Flocalhost%3A8834%22+%7D%0D%0A++++%29%0D%0A++++MinimumBuild+%3D+26100++%23+Windows+11+24H2%0D%0A%7D%0D%0A%0D%0A%23+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0D%0A%23+HELPER+FUNCTIONS%0D%0A%23+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0D%0A%0D%0Afunction+Write-Log+%7B%0D%0A++++param%28%0D%0A++++++++%5Bstring%5D%24Message%2C%0D%0A++++++++%5Bstring%5D%24LogFile%2C%0D%0A++++++++%5Bswitch%5D%24IsError%0D%0A++++%29%0D%0A++++%0D%0A++++%24timestamp+%3D+Get-Date+-Format+%22yyyy-MM-dd+HH%3Amm%3Ass%22%0D%0A++++%24logMessage+%3D+%22%5B%24timestamp%5D+%24Message%22%0D%0A++++%0D%0A++++if+%28%24IsError%29+%7B%0D%0A++++++++%24logMessage+%3D+%22%5BERROR%5D+%24logMessage%22%0D%0A++++%7D%0D%0A++++%0D%0A++++%24logMessage+%7C+Out-File+-FilePath+%24LogFile+-Append+-Encoding+Ascii%0D%0A++++Write-Host+%24logMessage%0D%0A%7D%0D%0A%0D%0Afunction+Get-RemoteJson+%7B%0D%0A++++param%28%0D%0A++++++++%5Bstring%5D%24Url%2C%0D%0A++++++++%5Bstring%5D%24LogFile%0D%0A++++%29%0D%0A++++%0D%0A++++try+%7B%0D%0A++++++++Write-Log+%22Fetching%3A+%24Url%22+-LogFile+%24LogFile%0D%0A++++++++%24response+%3D+Invoke-RestMethod+-Uri+%24Url+-ErrorAction+Stop%0D%0A++++++++return+%24response%0D%0A++++%7D%0D%0A++++catch+%7B%0D%0A++++++++Write-Log+%22Failed+to+fetch+%24Url+%3A+%24_%22+-LogFile+%24LogFile+-IsError%0D%0A++++++++return+%24null%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0Afunction+New-DirectoryStructure+%7B%0D%0A++++param%28%5Bhashtable%5D%24Config%29%0D%0A++++%0D%0A++++Write-Host+%22Creating+directory+structure...%22%0D%0A++++%0D%0A++++%23+Build+Logs%0D%0A++++%24logsDir+%3D+New-Item+-Path+%24Config.Directories.Desktop+-Name+%22Build+Logs%22+-ItemType+Directory+-Force%0D%0A++++%24logs+%3D+%40%7B%0D%0A++++++++Main+++++++++++++++%3D+New-Item+-Path+%24logsDir+-Name+%22logs.txt%22+-ItemType+File+-Force%0D%0A++++++++WinGet+++++++++++++%3D+New-Item+-Path+%24logsDir+-Name+%22winget.txt%22+-ItemType+File+-Force%0D%0A++++++++Containers+++++++++%3D+New-Item+-Path+%24logsDir+-Name+%22containers.txt%22+-ItemType+File+-Force%0D%0A++++++++Repositories+++++++%3D+New-Item+-Path+%24logsDir+-Name+%22repositories.txt%22+-ItemType+File+-Force%0D%0A++++++++PowerShell_Modules+%3D+New-Item+-Path+%24logsDir+-Name+%22powershell_modules.txt%22+-ItemType+File+-Force%0D%0A++++++++Capabilities+++++++%3D+New-Item+-Path+%24logsDir+-Name+%22capabilities.txt%22+-ItemType+File+-Force%0D%0A++++++++Files++++++++++++++%3D+New-Item+-Path+%24logsDir+-Name+%22files.txt%22+-ItemType+File+-Force%0D%0A++++%7D%0D%0A++++%0D%0A++++%23+Job+structure%0D%0A++++%24jobDir+%3D+New-Item+-Path+%24Config.Directories.Desktop+-Name+%22Job%22+-ItemType+Directory+-Force%0D%0A++++%24phaseDir+%3D+New-Item+-Path+%24jobDir+-Name+%22PhaseName%22+-ItemType+Directory+-Force%0D%0A++++New-Item+-Path+%24phaseDir+-Name+%22Docs%22+-ItemType+Directory+-Force+%7C+Out-Null%0D%0A++++New-Item+-Path+%24phaseDir+-Name+%22Evidence%22+-ItemType+Directory+-Force+%7C+Out-Null%0D%0A++++New-Item+-Path+%24phaseDir+-Name+%22Output%22+-ItemType+Directory+-Force+%7C+Out-Null%0D%0A++++New-Item+-Path+%24phaseDir+-Name+%22report.txt%22+-ItemType+File+-Force+%7C+Out-Null%0D%0A++++New-Item+-Path+%24phaseDir+-Name+%22notes.txt%22+-ItemType+File+-Force+%7C+Out-Null%0D%0A++++New-Item+-Path+%24phaseDir+-Name+%22vulnerabilities.txt%22+-ItemType+File+-Force+%7C+Out-Null%0D%0A++++%0D%0A++++%23+Tools+structure%0D%0A++++%24toolsDir+%3D+New-Item+-Path+%24Config.Directories.Desktop+-Name+%22Tools%22+-ItemType+Directory+-Force%0D%0A++++%24toolDirs+%3D+%40%7B%0D%0A++++++++Config+++++++++++%3D+New-Item+-Path+%24toolsDir+-Name+%22Config%22+-ItemType+Directory+-Force%0D%0A++++++++Evasion++++++++++%3D+New-Item+-Path+%24toolsDir+-Name+%22Evasion%22+-ItemType+Directory+-Force%0D%0A++++++++Windows++++++++++%3D+New-Item+-Path+%24toolsDir+-Name+%22Windows%22+-ItemType+Directory+-Force%0D%0A++++++++ActiveDirectory++%3D+New-Item+-Path+%24toolsDir+-Name+%22Active+Directory%22+-ItemType+Directory+-Force%0D%0A++++++++Network++++++++++%3D+New-Item+-Path+%24toolsDir+-Name+%22Network%22+-ItemType+Directory+-Force%0D%0A++++++++Kubernetes+++++++%3D+New-Item+-Path+%24toolsDir+-Name+%22Kubernetes%22+-ItemType+Directory+-Force%0D%0A++++++++Azure++++++++++++%3D+New-Item+-Path+%24toolsDir+-Name+%22Azure%22+-ItemType+Directory+-Force%0D%0A++++%7D%0D%0A++++%0D%0A++++return+%40%7B%0D%0A++++++++Logs+++++%3D+%24logs%0D%0A++++++++ToolDirs+%3D+%24toolDirs%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0Afunction+Test-SystemCompatibility+%7B%0D%0A++++param%28%0D%0A++++++++%5Bint%5D%24MinimumBuild%2C%0D%0A++++++++%5Bstring%5D%24LogFile%0D%0A++++%29%0D%0A++++%0D%0A++++%24currentBuild+%3D+%5BSystem.Environment%5D%3A%3AOSVersion.Version.Build%0D%0A++++%0D%0A++++if+%28%24currentBuild+-lt+%24MinimumBuild%29+%7B%0D%0A++++++++Write-Log+%22System+incompatible.+Build+%24currentBuild+%3C+%24MinimumBuild+%28Windows+11+24H2+required%29%22+-LogFile+%24LogFile+-IsError%0D%0A++++++++return+%24false%0D%0A++++%7D%0D%0A++++%0D%0A++++Write-Log+%22System+compatible.+Build%3A+%24currentBuild%22+-LogFile+%24LogFile%0D%0A++++return+%24true%0D%0A%7D%0D%0A%0D%0A%23+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0D%0A%23+CONFIGURATION+FUNCTIONS%0D%0A%23+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0D%0A%0D%0Afunction+Set-PowerConfiguration+%7B%0D%0A++++param%28%5Bhashtable%5D%24PowerConfig%29%0D%0A++++%0D%0A++++Write-Host+%22Configuring+power+settings...%22%0D%0A++++%0D%0A++++powercfg.exe+%2FsetACvalueIndex+scheme_current+sub_buttons+lidAction+%24PowerConfig.LidActionAC%0D%0A++++powercfg.exe+%2FsetDCvalueIndex+scheme_current+sub_buttons+lidAction+%24PowerConfig.LidActionDC%0D%0A++++powercfg.exe+%2FsetActive+scheme_current%0D%0A%7D%0D%0A%0D%0Afunction+Add-DefenderExclusions+%7B%0D%0A++++param%28%5Barray%5D%24Paths%29%0D%0A++++%0D%0A++++Write-Host+%22Adding+Windows+Defender+exclusions...%22%0D%0A++++%0D%0A++++foreach+%28%24path+in+%24Paths%29+%7B%0D%0A++++++++if+%28Test-Path+%24path%29+%7B%0D%0A++++++++++++Add-MpPreference+-ExclusionPath+%24path%0D%0A++++++++++++Write-Host+%22++Added+exclusion%3A+%24path%22%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0Afunction+Set-DisplayScaling+%7B%0D%0A++++Write-Host+%22Setting+display+scaling+to+100%25...%22%0D%0A++++%0D%0A++++Set-ItemProperty+-Path+%22HKCU%3A%5CControl+Panel%5CDesktop%22+-Name+%22LogPixels%22+-Value+96+-Type+DWord+-Force%0D%0A++++Set-ItemProperty+-Path+%22HKCU%3A%5CControl+Panel%5CDesktop%22+-Name+%22Win8DpiScaling%22+-Value+1+-Type+DWord+-Force%0D%0A++++Set-ItemProperty+-Path+%22HKCU%3A%5CControl+Panel%5CDesktop%5CWindowMetrics%22+-Name+%22AppliedDPI%22+-Value+96+-Type+DWord+-Force%0D%0A%7D%0D%0A%0D%0Afunction+Set-EdgeBookmarks+%7B%0D%0A++++param%28%0D%0A++++++++%5Barray%5D%24Bookmarks%2C%0D%0A++++++++%5Bstring%5D%24LogFile%0D%0A++++%29%0D%0A++++%0D%0A++++Write-Host+%22Configuring+Edge+bookmarks...%22%0D%0A++++%0D%0A++++%24favouritesJson+%3D+%24Bookmarks+%7C+ConvertTo-Json+-Depth+4+-Compress%0D%0A++++%0D%0A++++%24registryPath+%3D+%22SOFTWARE%5CPolicies%5CMicrosoft%5CEdge%22%0D%0A++++%24registry+%3D+%5BMicrosoft.Win32.Registry%5D%3A%3ALocalMachine.OpenSubKey%28%24registryPath%2C+%24true%29%0D%0A++++%0D%0A++++if+%28%24null+-eq+%24registry%29+%7B%0D%0A++++++++%24registry+%3D+%5BMicrosoft.Win32.Registry%5D%3A%3ALocalMachine.CreateSubKey%28%24registryPath%2C+%24true%29%0D%0A++++%7D%0D%0A++++%0D%0A++++%24registry.SetValue%28%22ManagedFavorites%22%2C+%24favouritesJson%29%0D%0A++++%24registry.SetValue%28%22ImportFavorites%22%2C+0%29%0D%0A++++%24registry.Dispose%28%29%0D%0A++++%0D%0A++++Write-Log+%22Edge+bookmarks+configured%22+-LogFile+%24LogFile%0D%0A%7D%0D%0A%0D%0Afunction+New-ServiceShortcuts+%7B%0D%0A++++param%28%5Bhashtable%5D%24ToolDirs%29%0D%0A++++%0D%0A++++Write-Host+%22Creating+service+shortcuts...%22%0D%0A++++%0D%0A++++%24bloodhoundBat+%3D+%22docker+compose+-f+%24%28%24ToolDirs.Config%29%5CWin11-Pentest%5Cbloodhound-docker-compose.yml+-p+bloodhound+up+-d%22%0D%0A++++%24bloodhoundBat+%7C+Out-File+-FilePath+%22%24env%3AUSERPROFILE%5CDesktop%5CBloodhound.bat%22+-Encoding+Ascii%0D%0A++++%0D%0A++++%24cyberchefBat+%3D+%22docker+run+-d+-p+10001%3A80+ghcr.io%2Fgchq%2Fcyberchef%22%0D%0A++++%24cyberchefBat+%7C+Out-File+-FilePath+%22%24env%3AUSERPROFILE%5CDesktop%5CCyberChef.bat%22+-Encoding+Ascii%0D%0A%7D%0D%0A%0D%0A%23+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0D%0A%23+INSTALLATION+FUNCTIONS%0D%0A%23+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0D%0A%0D%0Afunction+Install-PowerShellModules+%7B%0D%0A++++param%28%0D%0A++++++++%5Bstring%5D%24RemoteUrl%2C%0D%0A++++++++%5Bstring%5D%24LogFile%0D%0A++++%29%0D%0A++++%0D%0A++++Write-Host+%22%60nInstalling+PowerShell+modules...%22%0D%0A++++Write-Log+%22%3D%3D%3D+PowerShell+Module+Installation+%3D%3D%3D%22+-LogFile+%24LogFile%0D%0A++++%0D%0A++++%24modules+%3D+Get-RemoteJson+-Url+%24RemoteUrl+-LogFile+%24LogFile%0D%0A++++if+%28-not+%24modules%29+%7B+return+%7D%0D%0A++++%0D%0A++++Install-PackageProvider+-Name+NuGet+-MinimumVersion+2.8.5.201+-Force+-Scope+CurrentUser+%7C+Out-Null%0D%0A++++Set-PSRepository+-Name+PSGallery+-InstallationPolicy+Trusted%0D%0A++++%0D%0A++++foreach+%28%24module+in+%24modules%29+%7B%0D%0A++++++++Write-Log+%22Installing+module%3A+%24module%22+-LogFile+%24LogFile%0D%0A++++++++Install-Module+-Name+%24module+-Scope+CurrentUser+-ErrorAction+Continue+%7C+Out-File+-FilePath+%24LogFile+-Append+-Encoding+Ascii%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0Afunction+Install-WindowsCapabilities+%7B%0D%0A++++param%28%0D%0A++++++++%5Bstring%5D%24RemoteUrl%2C%0D%0A++++++++%5Bstring%5D%24LogFile%0D%0A++++%29%0D%0A++++%0D%0A++++Write-Host+%22%60nInstalling+Windows+capabilities...%22%0D%0A++++Write-Log+%22%3D%3D%3D+Windows+Capabilities+Installation+%3D%3D%3D%22+-LogFile+%24LogFile%0D%0A++++%0D%0A++++%24capabilities+%3D+Get-RemoteJson+-Url+%24RemoteUrl+-LogFile+%24LogFile%0D%0A++++if+%28-not+%24capabilities%29+%7B+return+%7D%0D%0A++++%0D%0A++++foreach+%28%24capability+in+%24capabilities%29+%7B%0D%0A++++++++Write-Log+%22Adding+capability%3A+%24capability%22+-LogFile+%24LogFile%0D%0A++++++++Add-WindowsCapability+-Name+%24capability+-Online+-ErrorAction+Continue+%7C+Out-File+-FilePath+%24LogFile+-Append+-Encoding+Ascii%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0Afunction+Install-WingetApplications+%7B%0D%0A++++param%28%0D%0A++++++++%5Bstring%5D%24RemoteUrl%2C%0D%0A++++++++%5Bstring%5D%24LogFile%0D%0A++++%29%0D%0A++++%0D%0A++++Write-Host+%22%60nInstalling+WinGet+applications...%22%0D%0A++++Write-Log+%22%3D%3D%3D+WinGet+Application+Installation+%3D%3D%3D%22+-LogFile+%24LogFile%0D%0A++++%0D%0A++++%23+Wait+for+WinGet+to+be+available%0D%0A++++%24wingetTimeout+%3D+%5Bdatetime%5D%3A%3ANow.AddMinutes%285%29%0D%0A++++%24wingetExe+%3D+%22%24env%3ALOCALAPPDATA%5CMicrosoft%5CWindowsApps%5Cwinget.exe%22%0D%0A++++%0D%0A++++Write-Host+%22Waiting+for+WinGet+to+be+available...%22%0D%0A++++while+%28%24true%29+%7B%0D%0A++++++++if+%28Test-Path+%24wingetExe%29+%7B%0D%0A++++++++++++Write-Log+%22WinGet+found+at%3A+%24wingetExe%22+-LogFile+%24LogFile%0D%0A++++++++++++break%0D%0A++++++++%7D%0D%0A++++++++%0D%0A++++++++if+%28%5Bdatetime%5D%3A%3ANow+-gt+%24wingetTimeout%29+%7B%0D%0A++++++++++++Write-Log+%22WinGet+not+found+after+timeout%22+-LogFile+%24LogFile+-IsError%0D%0A++++++++++++return%0D%0A++++++++%7D%0D%0A++++++++%0D%0A++++++++Start-Sleep+-Seconds+1%0D%0A++++%7D%0D%0A++++%0D%0A++++%23+Fetch+and+install+applications%0D%0A++++%24applications+%3D+Get-RemoteJson+-Url+%24RemoteUrl+-LogFile+%24LogFile%0D%0A++++if+%28-not+%24applications%29+%7B+return+%7D%0D%0A++++%0D%0A++++foreach+%28%24app+in+%24applications.PSObject.Properties%29+%7B%0D%0A++++++++%24appId+%3D+%24app.Name%0D%0A++++++++%24appArgs+%3D+%24app.Value%0D%0A++++++++%0D%0A++++++++Write-Log+%22Installing%3A+%24appId+%24appArgs%22+-LogFile+%24LogFile%0D%0A++++++++%0D%0A++++++++%24arguments+%3D+%40%28%0D%0A++++++++++++%22install%22%2C%0D%0A++++++++++++%22%2D%2Dexact%22%2C%0D%0A++++++++++++%22%2D%2Did%22%2C+%24appId%2C%0D%0A++++++++++++%22%2D%2Dsilent%22%2C%0D%0A++++++++++++%22%2D%2Daccept-package-agreements%22%2C%0D%0A++++++++++++%22%2D%2Daccept-source-agreements%22%2C%0D%0A++++++++++++%22%2D%2Dsource%22%2C+%22winget%22%0D%0A++++++++%29%0D%0A++++++++%0D%0A++++++++if+%28%24appArgs+-and+%24appArgs+-ne+%22%22%29+%7B%0D%0A++++++++++++%24arguments+%2B%3D+%40%28%22%2D%2Doverride%22%2C+%24appArgs%29%0D%0A++++++++%7D%0D%0A++++++++%0D%0A++++++++%26+%24wingetExe+%40arguments+%7C+Out-File+-FilePath+%24LogFile+-Append+-Encoding+Ascii%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0Afunction+Install-Repositories+%7B%0D%0A++++param%28%0D%0A++++++++%5Bstring%5D%24RemoteUrl%2C%0D%0A++++++++%5Bstring%5D%24LogFile%2C%0D%0A++++++++%5Bhashtable%5D%24ToolDirs%0D%0A++++%29%0D%0A++++%0D%0A++++Write-Host+%22%60nCloning+repositories...%22%0D%0A++++Write-Log+%22%3D%3D%3D+Repository+Cloning+%3D%3D%3D%22+-LogFile+%24LogFile%0D%0A++++%0D%0A++++%24gitExe+%3D+%22%24env%3AProgramFiles%5CGit%5Ccmd%5Cgit.exe%22%0D%0A++++%0D%0A++++if+%28-not+%28Test-Path+%24gitExe%29%29+%7B%0D%0A++++++++Write-Log+%22Git+not+found+at%3A+%24gitExe%22+-LogFile+%24LogFile+-IsError%0D%0A++++++++return%0D%0A++++%7D%0D%0A++++%0D%0A++++%24repositories+%3D+Get-RemoteJson+-Url+%24RemoteUrl+-LogFile+%24LogFile%0D%0A++++if+%28-not+%24repositories%29+%7B+return+%7D%0D%0A++++%0D%0A++++%23+Replace+placeholders+in+destination+paths%0D%0A++++%24toolDirMap+%3D+%40%7B%0D%0A++++++++%27%24config%27+++++++++++%3D+%24ToolDirs.Config.FullName%0D%0A++++++++%27%24evasion%27++++++++++%3D+%24ToolDirs.Evasion.FullName%0D%0A++++++++%27%24windows%27++++++++++%3D+%24ToolDirs.Windows.FullName%0D%0A++++++++%27%24active_directory%27+%3D+%24ToolDirs.ActiveDirectory.FullName%0D%0A++++++++%27%24network%27++++++++++%3D+%24ToolDirs.Network.FullName%0D%0A++++++++%27%24kubernetes%27+++++++%3D+%24ToolDirs.Kubernetes.FullName%0D%0A++++++++%27%24azure%27++++++++++++%3D+%24ToolDirs.Azure.FullName%0D%0A++++%7D%0D%0A++++%0D%0A++++foreach+%28%24repo+in+%24repositories.PSObject.Properties%29+%7B%0D%0A++++++++%24repoUrl+%3D+%24repo.Name%0D%0A++++++++%24destination+%3D+%24repo.Value%0D%0A++++++++%0D%0A++++++++%23+Replace+placeholders%0D%0A++++++++foreach+%28%24placeholder+in+%24toolDirMap.Keys%29+%7B%0D%0A++++++++++++%24destination+%3D+%24destination+-replace+%5Bregex%5D%3A%3AEscape%28%24placeholder%29%2C+%24toolDirMap%5B%24placeholder%5D%0D%0A++++++++%7D%0D%0A++++++++%0D%0A++++++++Write-Log+%22Cloning%3A+%24repoUrl+-%3E+%24destination%22+-LogFile+%24LogFile%0D%0A++++++++%26+%24gitExe+clone+%24repoUrl+%24destination+2%3E%261+%7C+Out-File+-FilePath+%24LogFile+-Append+-Encoding+Ascii%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0Afunction+Install-Files+%7B%0D%0A++++param%28%0D%0A++++++++%5Bstring%5D%24RemoteUrl%2C%0D%0A++++++++%5Bstring%5D%24LogFile%2C%0D%0A++++++++%5Bhashtable%5D%24ToolDirs%0D%0A++++%29%0D%0A++++%0D%0A++++Write-Host+%22%60nDownloading+files...%22%0D%0A++++Write-Log+%22%3D%3D%3D+File+Downloads+%3D%3D%3D%22+-LogFile+%24LogFile%0D%0A++++%0D%0A++++%24files+%3D+Get-RemoteJson+-Url+%24RemoteUrl+-LogFile+%24LogFile%0D%0A++++if+%28-not+%24files%29+%7B+return+%7D%0D%0A++++%0D%0A++++%23+Replace+placeholders+in+destination+paths%0D%0A++++%24toolDirMap+%3D+%40%7B%0D%0A++++++++%27%24config%27+++++++++++%3D+%24ToolDirs.Config.FullName%0D%0A++++++++%27%24evasion%27++++++++++%3D+%24ToolDirs.Evasion.FullName%0D%0A++++++++%27%24windows%27++++++++++%3D+%24ToolDirs.Windows.FullName%0D%0A++++++++%27%24active_directory%27+%3D+%24ToolDirs.ActiveDirectory.FullName%0D%0A++++++++%27%24network%27++++++++++%3D+%24ToolDirs.Network.FullName%0D%0A++++++++%27%24kubernetes%27+++++++%3D+%24ToolDirs.Kubernetes.FullName%0D%0A++++++++%27%24azure%27++++++++++++%3D+%24ToolDirs.Azure.FullName%0D%0A++++%7D%0D%0A++++%0D%0A++++foreach+%28%24file+in+%24files.PSObject.Properties%29+%7B%0D%0A++++++++%24fileUrl+%3D+%24file.Name%0D%0A++++++++%24destination+%3D+%24file.Value%0D%0A++++++++%0D%0A++++++++%23+Replace+placeholders%0D%0A++++++++foreach+%28%24placeholder+in+%24toolDirMap.Keys%29+%7B%0D%0A++++++++++++%24destination+%3D+%24destination+-replace+%5Bregex%5D%3A%3AEscape%28%24placeholder%29%2C+%24toolDirMap%5B%24placeholder%5D%0D%0A++++++++%7D%0D%0A++++++++%0D%0A++++++++%23+Ensure+destination+directory+exists%0D%0A++++++++%24destinationDir+%3D+Split-Path+-Path+%24destination+-Parent%0D%0A++++++++if+%28-not+%28Test-Path+%24destinationDir%29%29+%7B%0D%0A++++++++++++New-Item+-Path+%24destinationDir+-ItemType+Directory+-Force+%7C+Out-Null%0D%0A++++++++%7D%0D%0A++++++++%0D%0A++++++++try+%7B%0D%0A++++++++++++Write-Log+%22Downloading%3A+%24fileUrl+-%3E+%24destination%22+-LogFile+%24LogFile%0D%0A++++++++++++Invoke-WebRequest+-Uri+%24fileUrl+-OutFile+%24destination+-ErrorAction+Stop%0D%0A++++++++++++Write-Log+%22Successfully+downloaded%3A+%24%28Split-Path+-Path+%24destination+-Leaf%29%22+-LogFile+%24LogFile%0D%0A++++++++%7D%0D%0A++++++++catch+%7B%0D%0A++++++++++++Write-Log+%22Failed+to+download+%24fileUrl+%3A+%24_%22+-LogFile+%24LogFile+-IsError%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0Afunction+Install-WSL+%7B%0D%0A++++param%28%5Bstring%5D%24LogFile%29%0D%0A++++%0D%0A++++Write-Host+%22%60nInstalling+WSL...%22%0D%0A++++Write-Log+%22%3D%3D%3D+WSL+Installation+%3D%3D%3D%22+-LogFile+%24LogFile%0D%0A++++%0D%0A++++wsl+%2D%2Dinstall+2%3E%261+%7C+Out-File+-FilePath+%24LogFile+-Append+-Encoding+Ascii%0D%0A%7D%0D%0A%0D%0Afunction+Invoke-WindowsActivation+%7B%0D%0A++++param%28%5Bstring%5D%24LogFile%29%0D%0A++++%0D%0A++++Write-Host+%22%60nActivating+Windows+and+Office...%22%0D%0A++++Write-Log+%22%3D%3D%3D+Windows%2FOffice+Activation+%3D%3D%3D%22+-LogFile+%24LogFile%0D%0A++++%0D%0A++++try+%7B%0D%0A++++++++%26+%28%5BScriptBlock%5D%3A%3ACreate%28%28Invoke-RestMethod+-Uri+https%3A%2F%2Fget.activated.win%29%29%29+%2FHWID+%2FOhook+2%3E%261+%7C+Out-File+-FilePath+%24LogFile+-Append+-Encoding+Ascii%0D%0A++++%7D%0D%0A++++catch+%7B%0D%0A++++++++Write-Log+%22Activation+failed%3A+%24_%22+-LogFile+%24LogFile+-IsError%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0A%23+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0D%0A%23+CONTAINER+INSTALLATION+%28Requires+Reboot%29%0D%0A%23+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0D%0A%0D%0Afunction+Install-ContainersStage1+%7B%0D%0A++++param%28%0D%0A++++++++%5Bstring%5D%24RemoteUrl%2C%0D%0A++++++++%5Bstring%5D%24SetupScriptsPath%2C%0D%0A++++++++%5Bstring%5D%24LogFile%0D%0A++++%29%0D%0A++++%0D%0A++++Write-Host+%22%60nPreparing+container+installation+%28Stage+1%29...%22%0D%0A++++Write-Log+%22%3D%3D%3D+Container+Installation+Stage+1+%3D%3D%3D%22+-LogFile+%24LogFile%0D%0A++++%0D%0A++++%23+Fetch+container+list%0D%0A++++%24containers+%3D+Get-RemoteJson+-Url+%24RemoteUrl+-LogFile+%24LogFile%0D%0A++++if+%28-not+%24containers%29+%7B+return+%7D%0D%0A++++%0D%0A++++%23+Save+containers+to+file+for+Stage+2%0D%0A++++%24containersFile+%3D+Join-Path+%24SetupScriptsPath+%22ContainerList.txt%22%0D%0A++++%24containers+%7C+ForEach-Object+%7B+%24_+%7D+%7C+Out-File+-FilePath+%24containersFile+-Encoding+Ascii%0D%0A++++%0D%0A++++%23+Create+Stage+2+script%0D%0A++++%24stage2Script+%3D+%40%27%0D%0A%23+Container+Installation+Stage+2+%28Post-Reboot%29%0D%0A%0D%0A%24logFile+%3D+%22%24env%3AUSERPROFILE%5CDesktop%5CBuild+Logs%5Ccontainers.txt%22%0D%0A%0D%0Afunction+Write-ContainerLog+%7B%0D%0A++++param%28%5Bstring%5D%24Message%29%0D%0A++++%24timestamp+%3D+Get-Date+-Format+%22yyyy-MM-dd+HH%3Amm%3Ass%22%0D%0A++++%22%5B%24timestamp%5D+%24Message%22+%7C+Out-File+-FilePath+%24logFile+-Append+-Encoding+Ascii%0D%0A%7D%0D%0A%0D%0AWrite-ContainerLog+%22%3D%3D%3D+Container+Installation+Stage+2+%3D%3D%3D%22%0D%0A%0D%0A%23+Download+and+install+Docker+Desktop%0D%0Atry+%7B%0D%0A++++Write-ContainerLog+%22Downloading+Docker+Desktop...%22%0D%0A++++%24dockerUri+%3D+%5Buri%5D%3A%3ANew%28%22https%3A%2F%2Fdesktop.docker.com%2Fwin%2Fmain%2Famd64%2FDocker%2520Desktop%2520Installer.exe%22%29%0D%0A++++%24dockerInstaller+%3D+%22%24env%3ATEMP%5CDockerDesktopInstaller.exe%22%0D%0A++++%0D%0A++++%24webClient+%3D+%5BSystem.Net.WebClient%5D%3A%3ANew%28%29%0D%0A++++%24webClient.DownloadFile%28%24dockerUri%2C+%24dockerInstaller%29%0D%0A++++%24webClient.Dispose%28%29%0D%0A++++%0D%0A++++Write-ContainerLog+%22Installing+Docker+Desktop...%22%0D%0A++++Start-Process+-FilePath+%24dockerInstaller+-ArgumentList+%22install%22%2C+%22%2D%2Dquiet%22%2C+%22%2D%2Daccept-license%22+-Wait+-NoNewWindow%0D%0A++++%0D%0A++++Remove-Item+-LiteralPath+%24dockerInstaller+-ErrorAction+SilentlyContinue%0D%0A++++Write-ContainerLog+%22Docker+Desktop+installed%22%0D%0A%7D%0D%0Acatch+%7B%0D%0A++++Write-ContainerLog+%22ERROR%3A+Failed+to+install+Docker+Desktop%3A+%24_%22%0D%0A++++exit+1%0D%0A%7D%0D%0A%0D%0A%23+Wait+for+Docker+Desktop+executable%0D%0A%24dockerTimeout+%3D+%5Bdatetime%5D%3A%3ANow.AddMinutes%285%29%0D%0A%24dockerDesktopExe+%3D+%22%24env%3AProgramFiles%5CDocker%5CDocker%5CDocker+Desktop.exe%22%0D%0A%0D%0AWrite-ContainerLog+%22Waiting+for+Docker+Desktop+executable...%22%0D%0Awhile+%28%24true%29+%7B%0D%0A++++if+%28Test-Path+%24dockerDesktopExe%29+%7B%0D%0A++++++++Write-ContainerLog+%22Starting+Docker+Desktop...%22%0D%0A++++++++Start-Process+-FilePath+%24dockerDesktopExe+-WindowStyle+Hidden%0D%0A++++++++break%0D%0A++++%7D%0D%0A++++%0D%0A++++if+%28%5Bdatetime%5D%3A%3ANow+-gt+%24dockerTimeout%29+%7B%0D%0A++++++++Write-ContainerLog+%22ERROR%3A+Docker+Desktop+executable+not+found+after+timeout%22%0D%0A++++++++exit+1%0D%0A++++%7D%0D%0A++++%0D%0A++++Start-Sleep+-Seconds+1%0D%0A%7D%0D%0A%0D%0A%23+Wait+for+Docker+Engine+to+be+ready%0D%0A%24engineTimeout+%3D+%5Bdatetime%5D%3A%3ANow.AddMinutes%285%29%0D%0A%24dockerExe+%3D+%22%24env%3AProgramFiles%5CDocker%5CDocker%5Cresources%5Cbin%5Cdocker.exe%22%0D%0A%0D%0AWrite-ContainerLog+%22Waiting+for+Docker+Engine+to+be+ready...%22%0D%0Awhile+%28%24true%29+%7B%0D%0A++++try+%7B%0D%0A++++++++%24info+%3D+%26+%24dockerExe+info+2%3E%261+%7C+Out-String%0D%0A++++++++%0D%0A++++++++if+%28%24info+-match+%22Name%3A+docker-desktop%22%29+%7B%0D%0A++++++++++++Write-ContainerLog+%22Docker+Engine+is+ready%22%0D%0A++++++++++++break%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A++++catch+%7B%0D%0A++++++++%23+Continue+waiting%0D%0A++++%7D%0D%0A++++%0D%0A++++if+%28%5Bdatetime%5D%3A%3ANow+-gt+%24engineTimeout%29+%7B%0D%0A++++++++Write-ContainerLog+%22ERROR%3A+Docker+Engine+failed+to+initialize%22%0D%0A++++++++exit+1%0D%0A++++%7D%0D%0A++++%0D%0A++++Start-Sleep+-Seconds+2%0D%0A%7D%0D%0A%0D%0A%23+Pull+container+images%0D%0A%24containersFile+%3D+%22%24env%3ASystemRoot%5CSetup%5CScripts%5CContainerList.txt%22%0D%0A%0D%0Aif+%28Test-Path+%24containersFile%29+%7B%0D%0A++++Get-Content+-Path+%24containersFile+%7C+ForEach-Object+%7B%0D%0A++++++++%24container+%3D+%24_.Trim%28%29%0D%0A++++++++if+%28%24container%29+%7B%0D%0A++++++++++++Write-ContainerLog+%22Pulling+container%3A+%24container%22%0D%0A++++++++++++%26+%24dockerExe+pull+%24container+2%3E%261+%7C+Out-File+-FilePath+%24logFile+-Append+-Encoding+Ascii%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A%7D%0D%0A%0D%0A%23+Cleanup+desktop+shortcuts%0D%0AWrite-ContainerLog+%22Cleaning+up...%22%0D%0ARemove-Item+-Path+%22%24env%3APUBLIC%5CDesktop%5C*%22+-ErrorAction+SilentlyContinue%0D%0ARemove-Item+-Path+%22%24env%3AUSERPROFILE%5CDesktop%5CDocker+Desktop.lnk%22+-ErrorAction+SilentlyContinue%0D%0ARemove-Item+-Path+%22%24env%3AUSERPROFILE%5CDesktop%5CInsomnia.lnk%22+-ErrorAction+SilentlyContinue%0D%0A%0D%0A%23+Generate+installation+report%0D%0AWrite-ContainerLog+%22Generating+installation+report...%22%0D%0A%0D%0A%24readmeContent+%3D+%40%28%29%0D%0A%24readmeContent+%2B%3D+%22%3D%22+*+80%0D%0A%24readmeContent+%2B%3D+%22Windows+11+Pentesting+Environment+-+Installation+Report%22%0D%0A%24readmeContent+%2B%3D+%22%3D%22+*+80%0D%0A%24readmeContent+%2B%3D+%22%22%0D%0A%24readmeContent+%2B%3D+%22Generated%3A+%24%28Get-Date+-Format+%27yyyy-MM-dd+HH%3Amm%3Ass%27%29%22%0D%0A%24readmeContent+%2B%3D+%22%22%0D%0A%0D%0A%23+Helper+function+for+timeouts%0D%0Afunction+Invoke-WithTimeout+%7B%0D%0A++++param%28%0D%0A++++++++%5BScriptBlock%5D%24ScriptBlock%2C%0D%0A++++++++%5Bint%5D%24TimeoutSeconds+%3D+30%0D%0A++++%29%0D%0A++++%0D%0A++++%24job+%3D+Start-Job+-ScriptBlock+%24ScriptBlock%0D%0A++++Wait-Job+-Job+%24job+-Timeout+%24TimeoutSeconds+%7C+Out-Null%0D%0A++++%0D%0A++++if+%28%24job.State+-eq+%27Running%27%29+%7B%0D%0A++++++++Stop-Job+-Job+%24job%0D%0A++++++++Remove-Job+-Job+%24job+-Force%0D%0A++++++++return+%24null%0D%0A++++%7D%0D%0A++++%0D%0A++++%24result+%3D+Receive-Job+-Job+%24job%0D%0A++++Remove-Job+-Job+%24job+-Force%0D%0A++++return+%24result%0D%0A%7D%0D%0A%0D%0A%23+Check+PowerShell+Modules%0D%0A%24readmeContent+%2B%3D+%22%5B*%5D+PowerShell+Modules%22%0D%0A%24modulesFile+%3D+%22%24env%3ASystemRoot%5CSetup%5CScripts%5CModulesList.txt%22%0D%0Aif+%28Test-Path+%24modulesFile%29+%7B%0D%0A++++Get-Content+-Path+%24modulesFile+%7C+ForEach-Object+%7B%0D%0A++++++++%24moduleName+%3D+%24_.Trim%28%29%0D%0A++++++++if+%28%24moduleName%29+%7B%0D%0A++++++++++++try+%7B%0D%0A++++++++++++++++%24installed+%3D+Invoke-WithTimeout+-TimeoutSeconds+10+-ScriptBlock+%7B%0D%0A++++++++++++++++++++param%28%24name%29%0D%0A++++++++++++++++++++Get-Module+-ListAvailable+-Name+%24name+-ErrorAction+SilentlyContinue%0D%0A++++++++++++++++%7D+-ArgumentList+%24moduleName%0D%0A++++++++++++++++%0D%0A++++++++++++++++if+%28%24installed%29+%7B%0D%0A++++++++++++++++++++%24readmeContent+%2B%3D+%22%5B%2B%5D+%24moduleName%22%0D%0A++++++++++++++++%7D+else+%7B%0D%0A++++++++++++++++++++%24readmeContent+%2B%3D+%22%5B-%5D+%24moduleName%22%0D%0A++++++++++++++++%7D%0D%0A++++++++++++%7D+catch+%7B%0D%0A++++++++++++++++%24readmeContent+%2B%3D+%22%5B%3F%5D+%24moduleName+%28check+timed+out%29%22%0D%0A++++++++++++%7D%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A%7D%0D%0A%24readmeContent+%2B%3D+%22%22%0D%0A%0D%0A%23+Check+Windows+Capabilities%0D%0A%24readmeContent+%2B%3D+%22%5B*%5D+Windows+Capabilities%22%0D%0A%24capabilitiesFile+%3D+%22%24env%3ASystemRoot%5CSetup%5CScripts%5CCapabilitiesList.txt%22%0D%0Aif+%28Test-Path+%24capabilitiesFile%29+%7B%0D%0A++++Get-Content+-Path+%24capabilitiesFile+%7C+ForEach-Object+%7B%0D%0A++++++++%24capabilityName+%3D+%24_.Trim%28%29%0D%0A++++++++if+%28%24capabilityName%29+%7B%0D%0A++++++++++++try+%7B%0D%0A++++++++++++++++%24capability+%3D+Invoke-WithTimeout+-TimeoutSeconds+10+-ScriptBlock+%7B%0D%0A++++++++++++++++++++param%28%24name%29%0D%0A++++++++++++++++++++Get-WindowsCapability+-Online+-Name+%24name+-ErrorAction+SilentlyContinue%0D%0A++++++++++++++++%7D+-ArgumentList+%24capabilityName%0D%0A++++++++++++++++%0D%0A++++++++++++++++if+%28%24capability+-and+%24capability.State+-eq+%22Installed%22%29+%7B%0D%0A++++++++++++++++++++%24readmeContent+%2B%3D+%22%5B%2B%5D+%24capabilityName%22%0D%0A++++++++++++++++%7D+else+%7B%0D%0A++++++++++++++++++++%24readmeContent+%2B%3D+%22%5B-%5D+%24capabilityName%22%0D%0A++++++++++++++++%7D%0D%0A++++++++++++%7D+catch+%7B%0D%0A++++++++++++++++%24readmeContent+%2B%3D+%22%5B%3F%5D+%24capabilityName+%28check+timed+out%29%22%0D%0A++++++++++++%7D%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A%7D%0D%0A%24readmeContent+%2B%3D+%22%22%0D%0A%0D%0A%23+Check+WinGet+Applications%0D%0A%24readmeContent+%2B%3D+%22%5B*%5D+WinGet+Applications%22%0D%0A%24wingetFile+%3D+%22%24env%3ASystemRoot%5CSetup%5CScripts%5CWingetList.txt%22%0D%0A%24wingetExe+%3D+%22%24env%3ALOCALAPPDATA%5CMicrosoft%5CWindowsApps%5Cwinget.exe%22%0D%0Aif+%28%28Test-Path+%24wingetFile%29+-and+%28Test-Path+%24wingetExe%29%29+%7B%0D%0A++++Get-Content+-Path+%24wingetFile+%7C+ForEach-Object+%7B%0D%0A++++++++%24appId+%3D+%24_.Trim%28%29%0D%0A++++++++if+%28%24appId%29+%7B%0D%0A++++++++++++try+%7B%0D%0A++++++++++++++++%24result+%3D+Invoke-WithTimeout+-TimeoutSeconds+15+-ScriptBlock+%7B%0D%0A++++++++++++++++++++param%28%24exe%2C+%24id%29%0D%0A++++++++++++++++++++%26+%24exe+list+%2D%2Did+%24id+%2D%2Dexact+2%3E%261+%7C+Out-String%0D%0A++++++++++++++++%7D+-ArgumentList+%24wingetExe%2C+%24appId%0D%0A++++++++++++++++%0D%0A++++++++++++++++if+%28%24result+-and+%24result+-match+%5Bregex%5D%3A%3AEscape%28%24appId%29%29+%7B%0D%0A++++++++++++++++++++%24readmeContent+%2B%3D+%22%5B%2B%5D+%24appId%22%0D%0A++++++++++++++++%7D+else+%7B%0D%0A++++++++++++++++++++%24readmeContent+%2B%3D+%22%5B-%5D+%24appId%22%0D%0A++++++++++++++++%7D%0D%0A++++++++++++%7D+catch+%7B%0D%0A++++++++++++++++%24readmeContent+%2B%3D+%22%5B%3F%5D+%24appId+%28check+timed+out%29%22%0D%0A++++++++++++%7D%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A%7D%0D%0A%24readmeContent+%2B%3D+%22%22%0D%0A%0D%0A%23+Check+Repositories%0D%0A%24readmeContent+%2B%3D+%22%5B*%5D+Repositories%22%0D%0A%24reposFile+%3D+%22%24env%3ASystemRoot%5CSetup%5CScripts%5CRepositoriesList.txt%22%0D%0Aif+%28Test-Path+%24reposFile%29+%7B%0D%0A++++Get-Content+-Path+%24reposFile+%7C+ForEach-Object+%7B%0D%0A++++++++%24line+%3D+%24_.Trim%28%29%0D%0A++++++++if+%28%24line%29+%7B%0D%0A++++++++++++%24parts+%3D+%24line+-split+%27%5C%7C%27%0D%0A++++++++++++if+%28%24parts.Count+-eq+2%29+%7B%0D%0A++++++++++++++++%24repoUrl+%3D+%24parts%5B0%5D%0D%0A++++++++++++++++%24repoPath+%3D+%24parts%5B1%5D%0D%0A++++++++++++++++%0D%0A++++++++++++++++%24gitFolder+%3D+Join-Path+%24repoPath+%22.git%22%0D%0A++++++++++++++++if+%28%28Test-Path+%24repoPath%29+-and+%28Test-Path+%24gitFolder%29%29+%7B%0D%0A++++++++++++++++++++%24readmeContent+%2B%3D+%22%5B%2B%5D+%24repoUrl%22%0D%0A++++++++++++++++%7D+else+%7B%0D%0A++++++++++++++++++++%24readmeContent+%2B%3D+%22%5B-%5D+%24repoUrl%22%0D%0A++++++++++++++++%7D%0D%0A++++++++++++%7D%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A%7D%0D%0A%24readmeContent+%2B%3D+%22%22%0D%0A%0D%0A%23+Check+Files%0D%0A%24readmeContent+%2B%3D+%22%5B*%5D+Downloaded+Files%22%0D%0A%24filesFile+%3D+%22%24env%3ASystemRoot%5CSetup%5CScripts%5CFilesList.txt%22%0D%0Aif+%28Test-Path+%24filesFile%29+%7B%0D%0A++++Get-Content+-Path+%24filesFile+%7C+ForEach-Object+%7B%0D%0A++++++++%24line+%3D+%24_.Trim%28%29%0D%0A++++++++if+%28%24line%29+%7B%0D%0A++++++++++++%24parts+%3D+%24line+-split+%27%5C%7C%27%0D%0A++++++++++++if+%28%24parts.Count+-eq+2%29+%7B%0D%0A++++++++++++++++%24fileUrl+%3D+%24parts%5B0%5D%0D%0A++++++++++++++++%24filePath+%3D+%24parts%5B1%5D%0D%0A++++++++++++++++%0D%0A++++++++++++++++if+%28%28Test-Path+%24filePath%29+-and+%28%28Get-Item+%24filePath%29.Length+-gt+0%29%29+%7B%0D%0A++++++++++++++++++++%24readmeContent+%2B%3D+%22%5B%2B%5D+%24fileUrl%22%0D%0A++++++++++++++++%7D+else+%7B%0D%0A++++++++++++++++++++%24readmeContent+%2B%3D+%22%5B-%5D+%24fileUrl%22%0D%0A++++++++++++++++%7D%0D%0A++++++++++++%7D%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A%7D%0D%0A%24readmeContent+%2B%3D+%22%22%0D%0A%0D%0A%23+Check+Containers%0D%0A%24dockerProcess+%3D+Get-Process+%22Docker+Desktop%22+-ErrorAction+SilentlyContinue%0D%0Aif+%28-not+%24dockerProcess%29+%7B%0D%0A++++%24readmeContent+%2B%3D+%22%5B*%5D+Starting+Docker+Desktop...%22%0D%0A++++Start-Process+%24dockerDesktopExe+-ErrorAction+SilentlyContinue%0D%0A++++%0D%0A++++%23+Wait+for+Docker+to+be+ready%0D%0A++++%24dockerReady+%3D+Invoke-WithTimeout+-TimeoutSeconds+60+-ScriptBlock+%7B%0D%0A++++++++param%28%24exe%29%0D%0A++++++++%24maxAttempts+%3D+30%0D%0A++++++++for+%28%24i+%3D+0%3B+%24i+-lt+%24maxAttempts%3B+%24i%2B%2B%29+%7B%0D%0A++++++++++++try+%7B%0D%0A++++++++++++++++%24result+%3D+%26+%24exe+info+2%3E%261%0D%0A++++++++++++++++if+%28%24LASTEXITCODE+-eq+0%29+%7B%0D%0A++++++++++++++++++++return+%24true%0D%0A++++++++++++++++%7D%0D%0A++++++++++++%7D+catch+%7B%7D%0D%0A++++++++++++Start-Sleep+-Seconds+2%0D%0A++++++++%7D%0D%0A++++++++return+%24false%0D%0A++++%7D+-ArgumentList+%24dockerExe%0D%0A%7D%0D%0A%0D%0A%24readmeContent+%2B%3D+%22%5B*%5D+Container+Images%22%0D%0Aif+%28Test-Path+%24containersFile%29+%7B%0D%0A++++Get-Content+-Path+%24containersFile+%7C+ForEach-Object+%7B%0D%0A++++++++%24container+%3D+%24_.Trim%28%29%0D%0A++++++++if+%28%24container%29+%7B%0D%0A++++++++++++try+%7B%0D%0A++++++++++++++++%24result+%3D+Invoke-WithTimeout+-TimeoutSeconds+10+-ScriptBlock+%7B%0D%0A++++++++++++++++++++param%28%24exe%2C+%24img%29%0D%0A++++++++++++++++++++%26+%24exe+images+%24img+%2D%2Dformat+%22%7B%7B.Repository%7D%7D%3A%7B%7B.Tag%7D%7D%22+2%3E%261+%7C+Out-String%0D%0A++++++++++++++++%7D+-ArgumentList+%24dockerExe%2C+%24container%0D%0A++++++++++++++++%0D%0A++++++++++++++++if+%28%24result+-and+%24result+-match+%5Bregex%5D%3A%3AEscape%28%24container%29%29+%7B%0D%0A++++++++++++++++++++%24readmeContent+%2B%3D+%22%5B%2B%5D+%24container%22%0D%0A++++++++++++++++%7D+else+%7B%0D%0A++++++++++++++++++++%24readmeContent+%2B%3D+%22%5B-%5D+%24container%22%0D%0A++++++++++++++++%7D%0D%0A++++++++++++%7D+catch+%7B%0D%0A++++++++++++++++%24readmeContent+%2B%3D+%22%5B%3F%5D+%24container+%28check+timed+out%29%22%0D%0A++++++++++++%7D%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A%7D%0D%0A%24readmeContent+%2B%3D+%22%22%0D%0A%0D%0A%23+Add+service+information%0D%0A%24readmeContent+%2B%3D+%22%3D%22+*+80%0D%0A%24readmeContent+%2B%3D+%22Service+URLs%22%0D%0A%24readmeContent+%2B%3D+%22%3D%22+*+80%0D%0A%24readmeContent+%2B%3D+%22%22%0D%0A%24readmeContent+%2B%3D+%22BloodHound%3A++http%3A%2F%2Flocalhost%3A10000%22%0D%0A%24readmeContent+%2B%3D+%22CyberChef%3A+++http%3A%2F%2Flocalhost%3A10001%22%0D%0A%24readmeContent+%2B%3D+%22Nessus%3A++++++https%3A%2F%2Flocalhost%3A8834%22%0D%0A%24readmeContent+%2B%3D+%22%22%0D%0A%24readmeContent+%2B%3D+%22Desktop+shortcuts+%28.bat+files%29+have+been+created+to+start+services.%22%0D%0A%24readmeContent+%2B%3D+%22%22%0D%0A%24readmeContent+%2B%3D+%22%3D%22+*+80%0D%0A%0D%0A%23+Write+README+to+desktop%0D%0A%24readmePath+%3D+%22%24env%3AUSERPROFILE%5CDesktop%5CREADME.txt%22%0D%0A%24readmeContent+%7C+Out-File+-FilePath+%24readmePath+-Encoding+Ascii%0D%0A%0D%0AWrite-ContainerLog+%22Installation+report+created+at%3A+%24readmePath%22%0D%0AWrite-ContainerLog+%22%3D%3D%3D+Container+Installation+Complete+%3D%3D%3D%22%0D%0A%0D%0A%23+Final+reboot%0D%0ARestart-Computer+-Force%0D%0A%27%40%0D%0A++++%0D%0A++++%24stage2ScriptPath+%3D+Join-Path+%24SetupScriptsPath+%22ContainerInstall.ps1%22%0D%0A++++%24stage2Script+%7C+Out-File+-FilePath+%24stage2ScriptPath+-Encoding+Ascii%0D%0A++++%0D%0A++++%23+Save+lists+for+verification%0D%0A++++%24wingetExe+%3D+%22%24env%3ALOCALAPPDATA%5CMicrosoft%5CWindowsApps%5Cwinget.exe%22%0D%0A++++if+%28Test-Path+%24wingetExe%29+%7B%0D%0A++++++++%24wingetApps+%3D+Get-RemoteJson+-Url+%24Config.RemoteUrls.WingetApplications+-LogFile+%24LogFile%0D%0A++++++++if+%28%24wingetApps%29+%7B%0D%0A++++++++++++%24wingetApps.PSObject.Properties.Name+%7C+Out-File+-FilePath+%28Join-Path+%24SetupScriptsPath+%22WingetList.txt%22%29+-Encoding+Ascii%0D%0A++++++++%7D%0D%0A++++%7D%0D%0A++++%0D%0A++++%24modules+%3D+Get-RemoteJson+-Url+%24Config.RemoteUrls.PowerShellModules+-LogFile+%24LogFile%0D%0A++++if+%28%24modules%29+%7B%0D%0A++++++++%24modules+%7C+Out-File+-FilePath+%28Join-Path+%24SetupScriptsPath+%22ModulesList.txt%22%29+-Encoding+Ascii%0D%0A++++%7D%0D%0A++++%0D%0A++++%24capabilities+%3D+Get-RemoteJson+-Url+%24Config.RemoteUrls.WindowsCapabilities+-LogFile+%24LogFile%0D%0A++++if+%28%24capabilities%29+%7B%0D%0A++++++++%24capabilities+%7C+Out-File+-FilePath+%28Join-Path+%24SetupScriptsPath+%22CapabilitiesList.txt%22%29+-Encoding+Ascii%0D%0A++++%7D%0D%0A++++%0D%0A++++%24repositories+%3D+Get-RemoteJson+-Url+%24Config.RemoteUrls.Repositories+-LogFile+%24LogFile%0D%0A++++if+%28%24repositories%29+%7B%0D%0A++++++++%24toolDirMap+%3D+%40%7B%0D%0A++++++++++++%27%24config%27+++++++++++%3D+%24toolDirs.Config.FullName%0D%0A++++++++++++%27%24evasion%27++++++++++%3D+%24toolDirs.Evasion.FullName%0D%0A++++++++++++%27%24windows%27++++++++++%3D+%24toolDirs.Windows.FullName%0D%0A++++++++++++%27%24active_directory%27+%3D+%24toolDirs.ActiveDirectory.FullName%0D%0A++++++++++++%27%24network%27++++++++++%3D+%24toolDirs.Network.FullName%0D%0A++++++++++++%27%24kubernetes%27+++++++%3D+%24toolDirs.Kubernetes.FullName%0D%0A++++++++++++%27%24azure%27++++++++++++%3D+%24toolDirs.Azure.FullName%0D%0A++++++++%7D%0D%0A++++++++%0D%0A++++++++%24reposList+%3D+%40%28%29%0D%0A++++++++foreach+%28%24repo+in+%24repositories.PSObject.Properties%29+%7B%0D%0A++++++++++++%24repoUrl+%3D+%24repo.Name%0D%0A++++++++++++%24destination+%3D+%24repo.Value%0D%0A++++++++++++foreach+%28%24placeholder+in+%24toolDirMap.Keys%29+%7B%0D%0A++++++++++++++++%24destination+%3D+%24destination+-replace+%5Bregex%5D%3A%3AEscape%28%24placeholder%29%2C+%24toolDirMap%5B%24placeholder%5D%0D%0A++++++++++++%7D%0D%0A++++++++++++%24reposList+%2B%3D+%22%24repoUrl%7C%24destination%22%0D%0A++++++++%7D%0D%0A++++++++%24reposList+%7C+Out-File+-FilePath+%28Join-Path+%24SetupScriptsPath+%22RepositoriesList.txt%22%29+-Encoding+Ascii%0D%0A++++%7D%0D%0A++++%0D%0A++++%24files+%3D+Get-RemoteJson+-Url+%24Config.RemoteUrls.Files+-LogFile+%24LogFile%0D%0A++++if+%28%24files%29+%7B%0D%0A++++++++%24toolDirMap+%3D+%40%7B%0D%0A++++++++++++%27%24config%27+++++++++++%3D+%24toolDirs.Config.FullName%0D%0A++++++++++++%27%24evasion%27++++++++++%3D+%24toolDirs.Evasion.FullName%0D%0A++++++++++++%27%24windows%27++++++++++%3D+%24toolDirs.Windows.FullName%0D%0A++++++++++++%27%24active_directory%27+%3D+%24toolDirs.ActiveDirectory.FullName%0D%0A++++++++++++%27%24network%27++++++++++%3D+%24toolDirs.Network.FullName%0D%0A++++++++++++%27%24kubernetes%27+++++++%3D+%24toolDirs.Kubernetes.FullName%0D%0A++++++++++++%27%24azure%27++++++++++++%3D+%24toolDirs.Azure.FullName%0D%0A++++++++%7D%0D%0A++++++++%0D%0A++++++++%24filesList+%3D+%40%28%29%0D%0A++++++++foreach+%28%24file+in+%24files.PSObject.Properties%29+%7B%0D%0A++++++++++++%24fileUrl+%3D+%24file.Name%0D%0A++++++++++++%24destination+%3D+%24file.Value%0D%0A++++++++++++foreach+%28%24placeholder+in+%24toolDirMap.Keys%29+%7B%0D%0A++++++++++++++++%24destination+%3D+%24destination+-replace+%5Bregex%5D%3A%3AEscape%28%24placeholder%29%2C+%24toolDirMap%5B%24placeholder%5D%0D%0A++++++++++++%7D%0D%0A++++++++++++%24filesList+%2B%3D+%22%24fileUrl%7C%24destination%22%0D%0A++++++++%7D%0D%0A++++++++%24filesList+%7C+Out-File+-FilePath+%28Join-Path+%24SetupScriptsPath+%22FilesList.txt%22%29+-Encoding+Ascii%0D%0A++++%7D%0D%0A++++%0D%0A++++%23+Register+Stage+2+script+to+run+after+next+reboot%0D%0A++++%24runOncePath+%3D+%22HKCU%3A%5CSoftware%5CMicrosoft%5CWindows%5CCurrentVersion%5CRunOnce%22%0D%0A++++%24runOnceCommand+%3D+%22powershell+-ExecutionPolicy+Bypass+-File+%60%22%24stage2ScriptPath%60%22%22%0D%0A++++New-ItemProperty+-Path+%24runOncePath+-Name+%22ContainerInstall%22+-Value+%24runOnceCommand+-Force+%7C+Out-Null%0D%0A++++%0D%0A++++Write-Log+%22Container+Stage+2+script+registered+for+next+boot%22+-LogFile+%24LogFile%0D%0A%7D%0D%0A%0D%0A%23+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0D%0A%23+MAIN+EXECUTION%0D%0A%23+%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%0D%0A%0D%0AWrite-Host+%22%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%22%0D%0AWrite-Host+%22++Windows+11+Pentesting+Environment+Setup%22%0D%0AWrite-Host+%22%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%22%0D%0AWrite-Host+%22%22%0D%0A%0D%0A%23+Create+directory+structure%0D%0A%24structure+%3D+New-DirectoryStructure+-Config+%24Config%0D%0A%24logs+%3D+%24structure.Logs%0D%0A%24toolDirs+%3D+%24structure.ToolDirs%0D%0A%0D%0A%23+Check+system+compatibility%0D%0Aif+%28-not+%28Test-SystemCompatibility+-MinimumBuild+%24Config.MinimumBuild+-LogFile+%24logs.Main.FullName%29%29+%7B%0D%0A++++Write-Host+%22%60nSetup+cannot+continue.+Press+any+key+to+exit...%22%0D%0A++++%24null+%3D+%24Host.UI.RawUI.ReadKey%28%22NoEcho%2CIncludeKeyDown%22%29%0D%0A++++exit+1%0D%0A%7D%0D%0A%0D%0A%23+Apply+system+configuration%0D%0ASet-PowerConfiguration+-PowerConfig+%24Config.PowerConfig%0D%0ASet-DisplayScaling%0D%0AAdd-DefenderExclusions+-Paths+%24Config.DefenderExclusions%0D%0ASet-EdgeBookmarks+-Bookmarks+%24Config.EdgeBookmarks+-LogFile+%24logs.Main.FullName%0D%0ANew-ServiceShortcuts+-ToolDirs+%24toolDirs%0D%0A%0D%0A%23+Install+components%0D%0AInstall-PowerShellModules+-RemoteUrl+%24Config.RemoteUrls.PowerShellModules+-LogFile+%24logs.PowerShell_Modules.FullName%0D%0AInstall-WindowsCapabilities+-RemoteUrl+%24Config.RemoteUrls.WindowsCapabilities+-LogFile+%24logs.Capabilities.FullName%0D%0AInstall-WingetApplications+-RemoteUrl+%24Config.RemoteUrls.WingetApplications+-LogFile+%24logs.WinGet.FullName%0D%0AInvoke-WindowsActivation+-LogFile+%24logs.Main.FullName%0D%0AInstall-Repositories+-RemoteUrl+%24Config.RemoteUrls.Repositories+-LogFile+%24logs.Repositories.FullName+-ToolDirs+%24toolDirs%0D%0AInstall-Files+-RemoteUrl+%24Config.RemoteUrls.Files+-LogFile+%24logs.Files.FullName+-ToolDirs+%24toolDirs%0D%0AInstall-WSL+-LogFile+%24logs.Main.FullName%0D%0A%0D%0A%23+Prepare+container+installation+%28requires+reboot%29%0D%0AInstall-ContainersStage1+-RemoteUrl+%24Config.RemoteUrls.Containers+-SetupScriptsPath+%24Config.Directories.SetupScripts+-LogFile+%24logs.Containers.FullName%0D%0A%0D%0AWrite-Host+%22%60n%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%22%0D%0AWrite-Host+%22++Initial+setup+complete.+System+will+reboot+to+continue...%22%0D%0AWrite-Host+%22%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%3D%22%0D%0A%0D%0AStart-Sleep+-Seconds+5%0D%0ARestart-Computer+-Force&FirstLogonScriptType0=Ps1&WdacMode=Skip-->
	<settings pass="offlineServicing"></settings>
	<settings pass="windowsPE">
		<component name="Microsoft-Windows-International-Core-WinPE" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<UILanguage>en-US</UILanguage>
		</component>
		<component name="Microsoft-Windows-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<ImageInstall>
				<OSImage>
					<InstallToAvailablePartition>true</InstallToAvailablePartition>
				</OSImage>
			</ImageInstall>
			<UserData>
				<ProductKey>
					<Key>VK7JG-NPHTM-C97JM-9MPGT-3V66T</Key>
					<WillShowUI>OnError</WillShowUI>
				</ProductKey>
				<AcceptEula>true</AcceptEula>
			</UserData>
			<UseConfigurationSet>false</UseConfigurationSet>
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassTPMCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassSecureBootCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>reg.exe add "HKLM\SYSTEM\Setup\LabConfig" /v BypassRAMCheck /t REG_DWORD /d 1 /f</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>4</Order>
					<Path>cmd.exe /c "&gt;&gt;"X:\diskpart.txt" (echo:SELECT DISK=0&amp;echo:CLEAN&amp;echo:CONVERT GPT&amp;echo:REM WinRE Partition (500MB, with special TypeID^)&amp;echo:CREATE PARTITION PRIMARY SIZE=500&amp;echo:FORMAT QUICK FS=NTFS LABEL=^"WinRE^")"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>5</Order>
					<Path>cmd.exe /c "&gt;&gt;"X:\diskpart.txt" (echo:SET ID=DE94BBA4-06D1-4D40-A16A-BFD50179D6AC&amp;echo:GPT ATTRIBUTES=0x8000000000000001&amp;echo:REM EFI System Partition (100MB^)&amp;echo:CREATE PARTITION EFI SIZE=100&amp;echo:FORMAT QUICK FS=FAT32 LABEL=^"System^")"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>6</Order>
					<Path>cmd.exe /c "&gt;&gt;"X:\diskpart.txt" (echo:REM MSR (16MB^)&amp;echo:CREATE PARTITION MSR SIZE=16&amp;echo:REM Windows partition (remaining space^)&amp;echo:CREATE PARTITION PRIMARY&amp;echo:FORMAT QUICK FS=NTFS LABEL=^"Windows^")"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>7</Order>
					<Path>cmd.exe /c "diskpart.exe /s "X:\diskpart.txt" &gt;&gt;"X:\diskpart.log" || ( type "X:\diskpart.log" &amp; echo diskpart encountered an error. &amp; pause &amp; exit /b 1 )"</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
	</settings>
	<settings pass="generalize"></settings>
	<settings pass="specialize">
		<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<ComputerName>TEMPNAME</ComputerName>
		</component>
		<component name="Microsoft-Windows-Deployment" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<RunSynchronous>
				<RunSynchronousCommand wcm:action="add">
					<Order>1</Order>
					<Path>powershell.exe -WindowStyle Hidden -NoProfile -Command "$xml = [xml]::new(); $xml.Load('C:\Windows\Panther\unattend.xml'); $sb = [scriptblock]::Create( $xml.unattend.Extensions.ExtractScript ); Invoke-Command -ScriptBlock $sb -ArgumentList $xml;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>2</Order>
					<Path>powershell.exe -WindowStyle Hidden -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\Specialize.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>3</Order>
					<Path>reg.exe load "HKU\DefaultUser" "C:\Users\Default\NTUSER.DAT"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>4</Order>
					<Path>powershell.exe -WindowStyle Hidden -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\DefaultUser.ps1' -Raw | Invoke-Expression;"</Path>
				</RunSynchronousCommand>
				<RunSynchronousCommand wcm:action="add">
					<Order>5</Order>
					<Path>reg.exe unload "HKU\DefaultUser"</Path>
				</RunSynchronousCommand>
			</RunSynchronous>
		</component>
	</settings>
	<settings pass="auditSystem"></settings>
	<settings pass="auditUser"></settings>
	<settings pass="oobeSystem">
		<component name="Microsoft-Windows-International-Core" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<InputLocale>0809:00000809</InputLocale>
			<SystemLocale>en-GB</SystemLocale>
			<UILanguage>en-US</UILanguage>
			<UserLocale>en-GB</UserLocale>
		</component>
		<component name="Microsoft-Windows-Shell-Setup" processorArchitecture="amd64" publicKeyToken="31bf3856ad364e35" language="neutral" versionScope="nonSxS">
			<UserAccounts>
				<LocalAccounts>
					<LocalAccount wcm:action="add">
						<Name>Pentest</Name>
						<DisplayName></DisplayName>
						<Group>Administrators</Group>
						<Password>
							<Value></Value>
							<PlainText>true</PlainText>
						</Password>
					</LocalAccount>
				</LocalAccounts>
			</UserAccounts>
			<AutoLogon>
				<Username>Pentest</Username>
				<Enabled>true</Enabled>
				<LogonCount>1</LogonCount>
				<Password>
					<Value></Value>
					<PlainText>true</PlainText>
				</Password>
			</AutoLogon>
			<OOBE>
				<ProtectYourPC>3</ProtectYourPC>
				<HideEULAPage>true</HideEULAPage>
				<HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>
				<HideOnlineAccountScreens>false</HideOnlineAccountScreens>
			</OOBE>
			<FirstLogonCommands>
				<SynchronousCommand wcm:action="add">
					<Order>1</Order>
					<CommandLine>powershell.exe -WindowStyle Hidden -NoProfile -Command "Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\FirstLogon.ps1' -Raw | Invoke-Expression;"</CommandLine>
				</SynchronousCommand>
			</FirstLogonCommands>
		</component>
	</settings>
	<Extensions xmlns="https://schneegans.de/windows/unattend-generator/">
		<ExtractScript>
param(
    [xml] $Document
);

foreach( $file in $Document.unattend.Extensions.File ) {
    $path = [System.Environment]::ExpandEnvironmentVariables( $file.GetAttribute( 'path' ) );
    mkdir -Path( $path | Split-Path -Parent ) -ErrorAction 'SilentlyContinue';
    $encoding = switch( [System.IO.Path]::GetExtension( $path ) ) {
        { $_ -in '.ps1', '.xml' } { [System.Text.Encoding]::UTF8; }
        { $_ -in '.reg', '.vbs', '.js' } { [System.Text.UnicodeEncoding]::new( $false, $true ); }
        default { [System.Text.Encoding]::Default; }
    };
    $bytes = $encoding.GetPreamble() + $encoding.GetBytes( $file.InnerText.Trim() );
    [System.IO.File]::WriteAllBytes( $path, $bytes );
}
		</ExtractScript>
		<File path="C:\Windows\Setup\Scripts\GetComputerName.ps1">
return 'PENTEST-{0:D3}' -f ( Get-Random -Minimum 0 -Maximum 999 );
		</File>
		<File path="C:\Windows\Setup\Scripts\SetComputerName.ps1">
$ErrorActionPreference = 'Stop';
Set-StrictMode -Version 'Latest';
&amp; {
	$newName = ( Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\ComputerName.txt' -Raw ).Trim();
	if( [string]::IsNullOrWhitespace( $newName ) ) {
		throw "No computer name was provided.";
	}

	$keys = @(
		@{
			LiteralPath = 'Registry::HKLM\SYSTEM\CurrentControlSet\Control\ComputerName\ComputerName';
			Name = 'ComputerName';
		};
		@{
			LiteralPath = 'Registry::HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters';
			Name = 'Hostname';
		};
		@{
			LiteralPath = 'Registry::HKLM\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters';
			Name = 'NV Hostname';
		};
	);

	while( $true ) {
		foreach( $key in $keys ) {
			Set-ItemProperty @key -Type 'String' -Value $newName;
		}
		Start-Sleep -Milliseconds 50;
	}
} *&gt;&amp;1 | Out-String &gt;&gt; 'C:\Windows\Setup\Scripts\SetComputerName.log';
		</File>
		<File path="C:\Windows\Setup\Scripts\RemovePackages.ps1">
$selectors = @(
	'Microsoft.Microsoft3DViewer';
	'Microsoft.BingSearch';
	'Microsoft.WindowsCalculator';
	'Microsoft.WindowsCamera';
	'Clipchamp.Clipchamp';
	'Microsoft.WindowsAlarms';
	'Microsoft.Copilot';
	'Microsoft.549981C3F5F10';
	'Microsoft.Windows.DevHome';
	'MicrosoftCorporationII.MicrosoftFamily';
	'Microsoft.WindowsFeedbackHub';
	'Microsoft.Edge.GameAssist';
	'Microsoft.GetHelp';
	'Microsoft.Getstarted';
	'microsoft.windowscommunicationsapps';
	'Microsoft.WindowsMaps';
	'Microsoft.MixedReality.Portal';
	'Microsoft.BingNews';
	'Microsoft.WindowsNotepad';
	'Microsoft.MicrosoftOfficeHub';
	'Microsoft.Office.OneNote';
	'Microsoft.OutlookForWindows';
	'Microsoft.Paint';
	'Microsoft.MSPaint';
	'Microsoft.People';
	'Microsoft.Windows.Photos';
	'Microsoft.PowerAutomateDesktop';
	'MicrosoftCorporationII.QuickAssist';
	'Microsoft.SkypeApp';
	'Microsoft.ScreenSketch';
	'Microsoft.MicrosoftSolitaireCollection';
	'Microsoft.MicrosoftStickyNotes';
	'MicrosoftTeams';
	'MSTeams';
	'Microsoft.Todos';
	'Microsoft.WindowsSoundRecorder';
	'Microsoft.Wallet';
	'Microsoft.BingWeather';
	'Microsoft.Xbox.TCUI';
	'Microsoft.XboxApp';
	'Microsoft.XboxGameOverlay';
	'Microsoft.XboxGamingOverlay';
	'Microsoft.XboxIdentityProvider';
	'Microsoft.XboxSpeechToTextOverlay';
	'Microsoft.GamingApp';
	'Microsoft.YourPhone';
	'Microsoft.ZuneMusic';
	'Microsoft.ZuneVideo';
);
$getCommand = {
  Get-AppxProvisionedPackage -Online;
};
$filterCommand = {
  $_.DisplayName -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Remove-AppxProvisionedPackage -AllUsers -Online -ErrorAction 'Continue';
  }
};
$type = 'Package';
$logfile = 'C:\Windows\Setup\Scripts\RemovePackages.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 | Out-String &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\RemoveCapabilities.ps1">
$selectors = @(
	'Print.Fax.Scan';
	'Language.Handwriting';
	'Browser.InternetExplorer';
	'MathRecognizer';
	'OneCoreUAP.OneSync';
	'Microsoft.Windows.MSPaint';
	'Microsoft.Windows.PowerShell.ISE';
	'App.Support.QuickAssist';
	'Microsoft.Windows.SnippingTool';
	'Language.Speech';
	'Language.TextToSpeech';
	'App.StepsRecorder';
	'Hello.Face.18967';
	'Hello.Face.Migration.18967';
	'Hello.Face.20134';
	'Media.WindowsMediaPlayer';
	'Microsoft.Windows.WordPad';
);
$getCommand = {
  Get-WindowsCapability -Online | Where-Object -Property 'State' -NotIn -Value @(
    'NotPresent';
    'Removed';
  );
};
$filterCommand = {
  ($_.Name -split '~')[0] -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Remove-WindowsCapability -Online -ErrorAction 'Continue';
  }
};
$type = 'Capability';
$logfile = 'C:\Windows\Setup\Scripts\RemoveCapabilities.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 | Out-String &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\RemoveFeatures.ps1">
$selectors = @(
	'MediaPlayback';
	'MicrosoftWindowsPowerShellV2Root';
	'Recall';
	'Microsoft-SnippingTool';
);
$getCommand = {
  Get-WindowsOptionalFeature -Online | Where-Object -Property 'State' -NotIn -Value @(
    'Disabled';
    'DisabledWithPayloadRemoved';
  );
};
$filterCommand = {
  $_.FeatureName -eq $selector;
};
$removeCommand = {
  [CmdletBinding()]
  param(
    [Parameter( Mandatory, ValueFromPipeline )]
    $InputObject
  );
  process {
    $InputObject | Disable-WindowsOptionalFeature -Online -Remove -NoRestart -ErrorAction 'Continue';
  }
};
$type = 'Feature';
$logfile = 'C:\Windows\Setup\Scripts\RemoveFeatures.log';
&amp; {
	$installed = &amp; $getCommand;
	foreach( $selector in $selectors ) {
		$result = [ordered] @{
			Selector = $selector;
		};
		$found = $installed | Where-Object -FilterScript $filterCommand;
		if( $found ) {
			$result.Output = $found | &amp; $removeCommand;
			if( $? ) {
				$result.Message = "$type removed.";
			} else {
				$result.Message = "$type not removed.";
				$result.Error = $Error[0];
			}
		} else {
			$result.Message = "$type not installed.";
		}
		$result | ConvertTo-Json -Depth 3 -Compress;
	}
} *&gt;&amp;1 | Out-String &gt;&gt; $logfile;
		</File>
		<File path="C:\Windows\Setup\Scripts\TaskbarLayoutModification.xml">
&lt;LayoutModificationTemplate xmlns="http://schemas.microsoft.com/Start/2014/LayoutModification" xmlns:defaultlayout="http://schemas.microsoft.com/Start/2014/FullDefaultLayout" xmlns:start="http://schemas.microsoft.com/Start/2014/StartLayout" xmlns:taskbar="http://schemas.microsoft.com/Start/2014/TaskbarLayout" Version="1"&gt;
	&lt;CustomTaskbarLayoutCollection PinListPlacement="Replace"&gt;
		&lt;defaultlayout:TaskbarLayout&gt;
			&lt;taskbar:TaskbarPinList&gt;
				&lt;taskbar:DesktopApp DesktopApplicationID="Microsoft.Windows.Explorer" /&gt;
				&lt;taskbar:UWA AppUserModelID="Microsoft.MicrosoftEdge_8wekyb3d8bbwe!MicrosoftEdge" /&gt;
				&lt;taskbar:UWA AppUserModelID="windows.immersivecontrolpanel_cw5n1h2txyewy!microsoft.windows.immersivecontrolpanel" /&gt;
			&lt;/taskbar:TaskbarPinList&gt;
		&lt;/defaultlayout:TaskbarLayout&gt;
	&lt;/CustomTaskbarLayoutCollection&gt;
&lt;/LayoutModificationTemplate&gt;
		</File>
		<File path="C:\Windows\Setup\Scripts\UnlockStartLayout.vbs">
HKU = &amp;H80000003
Set reg = GetObject("winmgmts://./root/default:StdRegProv")
Set fso = CreateObject("Scripting.FileSystemObject")

If reg.EnumKey(HKU, "", sids) = 0 Then
	If Not IsNull(sids) Then
		For Each sid In sids
			key = sid + "\Software\Policies\Microsoft\Windows\Explorer"
			name = "LockedStartLayout"
			If reg.GetDWORDValue(HKU, key, name, existing) = 0 Then
				reg.SetDWORDValue HKU, key, name, 0
			End If
		Next
	End If
End If
		</File>
		<File path="C:\Windows\Setup\Scripts\UnlockStartLayout.xml">
&lt;Task version="1.2" xmlns="http://schemas.microsoft.com/windows/2004/02/mit/task"&gt;
	&lt;Triggers&gt;
		&lt;EventTrigger&gt;
			&lt;Enabled&gt;true&lt;/Enabled&gt;
			&lt;Subscription&gt;&amp;lt;QueryList&amp;gt;&amp;lt;Query Id="0" Path="Application"&amp;gt;&amp;lt;Select Path="Application"&amp;gt;*[System[Provider[@Name='UnattendGenerator'] and EventID=1]]&amp;lt;/Select&amp;gt;&amp;lt;/Query&amp;gt;&amp;lt;/QueryList&amp;gt;&lt;/Subscription&gt;
		&lt;/EventTrigger&gt;
	&lt;/Triggers&gt;
	&lt;Principals&gt;
		&lt;Principal id="Author"&gt;
			&lt;UserId&gt;S-1-5-18&lt;/UserId&gt;
			&lt;RunLevel&gt;LeastPrivilege&lt;/RunLevel&gt;
		&lt;/Principal&gt;
	&lt;/Principals&gt;
	&lt;Settings&gt;
		&lt;MultipleInstancesPolicy&gt;IgnoreNew&lt;/MultipleInstancesPolicy&gt;
		&lt;DisallowStartIfOnBatteries&gt;false&lt;/DisallowStartIfOnBatteries&gt;
		&lt;StopIfGoingOnBatteries&gt;false&lt;/StopIfGoingOnBatteries&gt;
		&lt;AllowHardTerminate&gt;true&lt;/AllowHardTerminate&gt;
		&lt;StartWhenAvailable&gt;false&lt;/StartWhenAvailable&gt;
		&lt;RunOnlyIfNetworkAvailable&gt;false&lt;/RunOnlyIfNetworkAvailable&gt;
		&lt;IdleSettings&gt;
			&lt;StopOnIdleEnd&gt;true&lt;/StopOnIdleEnd&gt;
			&lt;RestartOnIdle&gt;false&lt;/RestartOnIdle&gt;
		&lt;/IdleSettings&gt;
		&lt;AllowStartOnDemand&gt;true&lt;/AllowStartOnDemand&gt;
		&lt;Enabled&gt;true&lt;/Enabled&gt;
		&lt;Hidden&gt;false&lt;/Hidden&gt;
		&lt;RunOnlyIfIdle&gt;false&lt;/RunOnlyIfIdle&gt;
		&lt;WakeToRun&gt;false&lt;/WakeToRun&gt;
		&lt;ExecutionTimeLimit&gt;PT72H&lt;/ExecutionTimeLimit&gt;
		&lt;Priority&gt;7&lt;/Priority&gt;
	&lt;/Settings&gt;
	&lt;Actions Context="Author"&gt;
		&lt;Exec&gt;
			&lt;Command&gt;C:\Windows\System32\wscript.exe&lt;/Command&gt;
			&lt;Arguments&gt;C:\Windows\Setup\Scripts\UnlockStartLayout.vbs&lt;/Arguments&gt;
		&lt;/Exec&gt;
	&lt;/Actions&gt;
&lt;/Task&gt;
		</File>
		<File path="C:\Windows\Setup\Scripts\TurnOffSystemSounds.ps1">
$excludes = Get-ChildItem -LiteralPath 'Registry::HKU\DefaultUser\AppEvents\EventLabels' |
    Where-Object -FilterScript { ($_ | Get-ItemProperty).ExcludeFromCPL -eq 1; } |
    Select-Object -ExpandProperty 'PSChildName';
Get-ChildItem -Path 'Registry::HKU\DefaultUser\AppEvents\Schemes\Apps\*\*' |
    Where-Object -Property 'PSChildName' -NotIn $excludes |
    Get-ChildItem -Include '.Current' | Set-ItemProperty -Name '(Default)' -Value '';
		</File>
		<File path="C:\Windows\Setup\Scripts\SetStartPins.ps1">
$json = '{"pinnedList":[]}';
if( [System.Environment]::OSVersion.Version.Build -lt 20000 ) {
	return;
}
$key = 'Registry::HKLM\SOFTWARE\Microsoft\PolicyManager\current\device\Start';
New-Item -Path $key -ItemType 'Directory' -ErrorAction 'SilentlyContinue';
Set-ItemProperty -LiteralPath $key -Name 'ConfigureStartPins' -Value $json -Type 'String';
		</File>
		<File path="C:\Windows\Setup\Scripts\SetColorTheme.ps1">
$lightThemeSystem = 0;
$lightThemeApps = 0;
$accentColorOnStart = 1;
$enableTransparency = 0;
$htmlAccentColor = '#1C9ED3';
&amp; {
	$params = @{
		LiteralPath = 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Themes\Personalize';
		Force = $true;
		Type = 'DWord';
	};
	Set-ItemProperty @params -Name 'SystemUsesLightTheme' -Value $lightThemeSystem;
	Set-ItemProperty @params -Name 'AppsUseLightTheme' -Value $lightThemeApps;
	Set-ItemProperty @params -Name 'ColorPrevalence' -Value $accentColorOnStart;
	Set-ItemProperty @params -Name 'EnableTransparency' -Value $enableTransparency;
};
&amp; {
	Add-Type -AssemblyName 'System.Drawing';
	$accentColor = [System.Drawing.ColorTranslator]::FromHtml( $htmlAccentColor );

	function ConvertTo-DWord {
		param(
			[System.Drawing.Color]
			$Color
		);
						
		[byte[]] $bytes = @(
			$Color.R;
			$Color.G;
			$Color.B;
			$Color.A;
		);
		return [System.BitConverter]::ToUInt32( $bytes, 0); 
	}

	$startColor = [System.Drawing.Color]::FromArgb( 0xD2, $accentColor );
	Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent' -Name 'StartColorMenu' -Value( ConvertTo-DWord -Color $accentColor ) -Type 'DWord' -Force;
	Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent' -Name 'AccentColorMenu' -Value( ConvertTo-DWord -Color $accentColor ) -Type 'DWord' -Force;
	Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\DWM' -Name 'AccentColor' -Value( ConvertTo-DWord -Color $accentColor ) -Type 'DWord' -Force;
	$params = @{
		LiteralPath = 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Accent';
		Name = 'AccentPalette';
	};
	$palette = Get-ItemPropertyValue @params;
	$index = 20;
	$palette[ $index++ ] = $accentColor.R;
	$palette[ $index++ ] = $accentColor.G;
	$palette[ $index++ ] = $accentColor.B;
	$palette[ $index++ ] = $accentColor.A;
	Set-ItemProperty @params -Value $palette -Type 'Binary' -Force;
};
		</File>
		<File path="C:\Windows\Setup\Scripts\SetWallpaper.ps1">
Add-Type -TypeDefinition '
	using System.Drawing;
	using System.Runtime.InteropServices;
	
	public static class WallpaperSetter {
		[DllImport("user32.dll")]
		private static extern bool SetSysColors(
			int cElements, 
			int[] lpaElements,
			int[] lpaRgbValues
		);

		[DllImport("user32.dll")]
		private static extern bool SystemParametersInfo(
			uint uiAction,
			uint uiParam,
			string pvParam,
			uint fWinIni
		);

		public static void SetDesktopBackground(Color color) {
			SystemParametersInfo(20, 0, "", 0);
			SetSysColors(1, new int[] { 1 }, new int[] { ColorTranslator.ToWin32(color) });
		}

		public static void SetDesktopImage(string file) {
			SystemParametersInfo(20, 0, file, 0);
		}
	}
' -ReferencedAssemblies 'System.Drawing';

function Set-WallpaperColor {
	param(
		[string]
		$HtmlColor
	);

	$color = [System.Drawing.ColorTranslator]::FromHtml( $HtmlColor );
	[WallpaperSetter]::SetDesktopBackground( $color );
	Set-ItemProperty -Path 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers' -Name 'BackgroundType' -Type 'DWord' -Value 1 -Force;
	Set-ItemProperty -Path 'Registry::HKCU\Control Panel\Desktop' -Name 'WallPaper' -Type 'String' -Value '' -Force;
	Set-ItemProperty -Path 'Registry::HKCU\Control Panel\Colors' -Name 'Background' -Type 'String' -Value "$($color.R) $($color.G) $($color.B)" -Force;
}

function Set-WallpaperImage {
	param(
		[string]
		$LiteralPath
	);

	if( $LiteralPath | Test-Path ) {
		[WallpaperSetter]::SetDesktopImage( $LiteralPath );
		Set-ItemProperty -Path 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Wallpapers' -Name 'BackgroundType' -Type 'DWord' -Value 0 -Force;
		Set-ItemProperty -Path 'Registry::HKCU\Control Panel\Desktop' -Name 'WallPaper' -Type 'String' -Value $LiteralPath -Force;
	} else {
		"Cannot use '$LiteralPath' as a desktop wallpaper because that file does not exist.";
	}
}
Set-WallpaperColor -HtmlColor '#002A30';
		</File>
		<File path="C:\Windows\Setup\Scripts\unattend-01.ps1">
#Requires -RunAsAdministrator

# ============================================================================
# CONFIGURATION
# ============================================================================

$REMOTE_BASE_URL = "https://raw.githubusercontent.com/jake73345634634/Win11-Pentest/main/Applications"

$Config = @{
    RemoteUrls = @{
        WingetApplications    = "$REMOTE_BASE_URL/winget.json"
        Containers            = "$REMOTE_BASE_URL/containers.json"
        Repositories          = "$REMOTE_BASE_URL/repositories.json"
        PowerShellModules     = "$REMOTE_BASE_URL/powershell_modules.json"
        WindowsCapabilities   = "$REMOTE_BASE_URL/capabilities.json"
        Files                 = "$REMOTE_BASE_URL/files.json"
    }
    Directories = @{
        Desktop       = "$env:USERPROFILE\Desktop"
        BuildLogs     = "$env:USERPROFILE\Desktop\Build Logs"
        Job           = "$env:USERPROFILE\Desktop\Job"
        Tools         = "$env:USERPROFILE\Desktop\Tools"
        SetupScripts  = "$env:SystemRoot\Setup\Scripts"
    }
    PowerConfig = @{
        LidActionAC = 0  # 0 = Do nothing when lid closes (on AC power)
        LidActionDC = 0  # 0 = Do nothing when lid closes (on battery)
    }
    DefenderExclusions = @(
        "$env:USERPROFILE\Desktop\Job"
        "$env:USERPROFILE\Desktop\Tools"
    )
    EdgeBookmarks = @(
        @{ toplevel_name = "Tools" }
        @{ name = "BloodHound"; url = "http://localhost:10000" }
        @{ name = "CyberChef"; url = "http://localhost:10001" }
        @{ name = "Nessus"; url = "https://localhost:8834" }
    )
    MinimumBuild = 26100  # Windows 11 24H2
}

# ============================================================================
# HELPER FUNCTIONS
# ============================================================================

function Write-Log {
    param(
        [string]$Message,
        [string]$LogFile,
        [switch]$IsError
    )
    
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] $Message"
    
    if ($IsError) {
        $logMessage = "[ERROR] $logMessage"
    }
    
    $logMessage | Out-File -FilePath $LogFile -Append -Encoding Ascii
    Write-Host $logMessage
}

function Get-RemoteJson {
    param(
        [string]$Url,
        [string]$LogFile
    )
    
    try {
        Write-Log "Fetching: $Url" -LogFile $LogFile
        $response = Invoke-RestMethod -Uri $Url -ErrorAction Stop
        return $response
    }
    catch {
        Write-Log "Failed to fetch $Url : $_" -LogFile $LogFile -IsError
        return $null
    }
}

function New-DirectoryStructure {
    param([hashtable]$Config)
    
    Write-Host "Creating directory structure..."
    
    # Build Logs
    $logsDir = New-Item -Path $Config.Directories.Desktop -Name "Build Logs" -ItemType Directory -Force
    $logs = @{
        Main               = New-Item -Path $logsDir -Name "logs.txt" -ItemType File -Force
        WinGet             = New-Item -Path $logsDir -Name "winget.txt" -ItemType File -Force
        Containers         = New-Item -Path $logsDir -Name "containers.txt" -ItemType File -Force
        Repositories       = New-Item -Path $logsDir -Name "repositories.txt" -ItemType File -Force
        PowerShell_Modules = New-Item -Path $logsDir -Name "powershell_modules.txt" -ItemType File -Force
        Capabilities       = New-Item -Path $logsDir -Name "capabilities.txt" -ItemType File -Force
        Files              = New-Item -Path $logsDir -Name "files.txt" -ItemType File -Force
    }
    
    # Job structure
    $jobDir = New-Item -Path $Config.Directories.Desktop -Name "Job" -ItemType Directory -Force
    $phaseDir = New-Item -Path $jobDir -Name "PhaseName" -ItemType Directory -Force
    New-Item -Path $phaseDir -Name "Docs" -ItemType Directory -Force | Out-Null
    New-Item -Path $phaseDir -Name "Evidence" -ItemType Directory -Force | Out-Null
    New-Item -Path $phaseDir -Name "Output" -ItemType Directory -Force | Out-Null
    New-Item -Path $phaseDir -Name "report.txt" -ItemType File -Force | Out-Null
    New-Item -Path $phaseDir -Name "notes.txt" -ItemType File -Force | Out-Null
    New-Item -Path $phaseDir -Name "vulnerabilities.txt" -ItemType File -Force | Out-Null
    
    # Tools structure
    $toolsDir = New-Item -Path $Config.Directories.Desktop -Name "Tools" -ItemType Directory -Force
    $toolDirs = @{
        Config           = New-Item -Path $toolsDir -Name "Config" -ItemType Directory -Force
        Evasion          = New-Item -Path $toolsDir -Name "Evasion" -ItemType Directory -Force
        Windows          = New-Item -Path $toolsDir -Name "Windows" -ItemType Directory -Force
        ActiveDirectory  = New-Item -Path $toolsDir -Name "Active Directory" -ItemType Directory -Force
        Network          = New-Item -Path $toolsDir -Name "Network" -ItemType Directory -Force
        Kubernetes       = New-Item -Path $toolsDir -Name "Kubernetes" -ItemType Directory -Force
        Azure            = New-Item -Path $toolsDir -Name "Azure" -ItemType Directory -Force
    }
    
    return @{
        Logs     = $logs
        ToolDirs = $toolDirs
    }
}

function Test-SystemCompatibility {
    param(
        [int]$MinimumBuild,
        [string]$LogFile
    )
    
    $currentBuild = [System.Environment]::OSVersion.Version.Build
    
    if ($currentBuild -lt $MinimumBuild) {
        Write-Log "System incompatible. Build $currentBuild &lt; $MinimumBuild (Windows 11 24H2 required)" -LogFile $LogFile -IsError
        return $false
    }
    
    Write-Log "System compatible. Build: $currentBuild" -LogFile $LogFile
    return $true
}

# ============================================================================
# CONFIGURATION FUNCTIONS
# ============================================================================

function Set-PowerConfiguration {
    param([hashtable]$PowerConfig)
    
    Write-Host "Configuring power settings..."
    
    powercfg.exe /setACvalueIndex scheme_current sub_buttons lidAction $PowerConfig.LidActionAC
    powercfg.exe /setDCvalueIndex scheme_current sub_buttons lidAction $PowerConfig.LidActionDC
    powercfg.exe /setActive scheme_current
}

function Add-DefenderExclusions {
    param([array]$Paths)
    
    Write-Host "Adding Windows Defender exclusions..."
    
    foreach ($path in $Paths) {
        if (Test-Path $path) {
            Add-MpPreference -ExclusionPath $path
            Write-Host "  Added exclusion: $path"
        }
    }
}

function Set-DisplayScaling {
    Write-Host "Setting display scaling to 100%..."
    
    Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "LogPixels" -Value 96 -Type DWord -Force
    Set-ItemProperty -Path "HKCU:\Control Panel\Desktop" -Name "Win8DpiScaling" -Value 1 -Type DWord -Force
    Set-ItemProperty -Path "HKCU:\Control Panel\Desktop\WindowMetrics" -Name "AppliedDPI" -Value 96 -Type DWord -Force
}

function Set-EdgeBookmarks {
    param(
        [array]$Bookmarks,
        [string]$LogFile
    )
    
    Write-Host "Configuring Edge bookmarks..."
    
    $favouritesJson = $Bookmarks | ConvertTo-Json -Depth 4 -Compress
    
    $registryPath = "SOFTWARE\Policies\Microsoft\Edge"
    $registry = [Microsoft.Win32.Registry]::LocalMachine.OpenSubKey($registryPath, $true)
    
    if ($null -eq $registry) {
        $registry = [Microsoft.Win32.Registry]::LocalMachine.CreateSubKey($registryPath, $true)
    }
    
    $registry.SetValue("ManagedFavorites", $favouritesJson)
    $registry.SetValue("ImportFavorites", 0)
    $registry.Dispose()
    
    Write-Log "Edge bookmarks configured" -LogFile $LogFile
}

function New-ServiceShortcuts {
    param([hashtable]$ToolDirs)
    
    Write-Host "Creating service shortcuts..."
    
    $bloodhoundBat = "docker compose -f $($ToolDirs.Config)\Win11-Pentest\bloodhound-docker-compose.yml -p bloodhound up -d"
    $bloodhoundBat | Out-File -FilePath "$env:USERPROFILE\Desktop\Bloodhound.bat" -Encoding Ascii
    
    $cyberchefBat = "docker run -d -p 10001:80 ghcr.io/gchq/cyberchef"
    $cyberchefBat | Out-File -FilePath "$env:USERPROFILE\Desktop\CyberChef.bat" -Encoding Ascii
}

# ============================================================================
# INSTALLATION FUNCTIONS
# ============================================================================

function Install-PowerShellModules {
    param(
        [string]$RemoteUrl,
        [string]$LogFile
    )
    
    Write-Host "`nInstalling PowerShell modules..."
    Write-Log "=== PowerShell Module Installation ===" -LogFile $LogFile
    
    $modules = Get-RemoteJson -Url $RemoteUrl -LogFile $LogFile
    if (-not $modules) { return }
    
    Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Scope CurrentUser | Out-Null
    Set-PSRepository -Name PSGallery -InstallationPolicy Trusted
    
    foreach ($module in $modules) {
        Write-Log "Installing module: $module" -LogFile $LogFile
        Install-Module -Name $module -Scope CurrentUser -ErrorAction Continue | Out-File -FilePath $LogFile -Append -Encoding Ascii
    }
}

function Install-WindowsCapabilities {
    param(
        [string]$RemoteUrl,
        [string]$LogFile
    )
    
    Write-Host "`nInstalling Windows capabilities..."
    Write-Log "=== Windows Capabilities Installation ===" -LogFile $LogFile
    
    $capabilities = Get-RemoteJson -Url $RemoteUrl -LogFile $LogFile
    if (-not $capabilities) { return }
    
    foreach ($capability in $capabilities) {
        Write-Log "Adding capability: $capability" -LogFile $LogFile
        Add-WindowsCapability -Name $capability -Online -ErrorAction Continue | Out-File -FilePath $LogFile -Append -Encoding Ascii
    }
}

function Install-WingetApplications {
    param(
        [string]$RemoteUrl,
        [string]$LogFile
    )
    
    Write-Host "`nInstalling WinGet applications..."
    Write-Log "=== WinGet Application Installation ===" -LogFile $LogFile
    
    # Wait for WinGet to be available
    $wingetTimeout = [datetime]::Now.AddMinutes(5)
    $wingetExe = "$env:LOCALAPPDATA\Microsoft\WindowsApps\winget.exe"
    
    Write-Host "Waiting for WinGet to be available..."
    while ($true) {
        if (Test-Path $wingetExe) {
            Write-Log "WinGet found at: $wingetExe" -LogFile $LogFile
            break
        }
        
        if ([datetime]::Now -gt $wingetTimeout) {
            Write-Log "WinGet not found after timeout" -LogFile $LogFile -IsError
            return
        }
        
        Start-Sleep -Seconds 1
    }
    
    # Fetch and install applications
    $applications = Get-RemoteJson -Url $RemoteUrl -LogFile $LogFile
    if (-not $applications) { return }
    
    foreach ($app in $applications.PSObject.Properties) {
        $appId = $app.Name
        $appArgs = $app.Value
        
        Write-Log "Installing: $appId $appArgs" -LogFile $LogFile
        
        $arguments = @(
            "install",
            "--exact",
            "--id", $appId,
            "--silent",
            "--accept-package-agreements",
            "--accept-source-agreements",
            "--source", "winget"
        )
        
        if ($appArgs -and $appArgs -ne "") {
            $arguments += @("--override", $appArgs)
        }
        
        &amp; $wingetExe @arguments | Out-File -FilePath $LogFile -Append -Encoding Ascii
    }
}

function Install-Repositories {
    param(
        [string]$RemoteUrl,
        [string]$LogFile,
        [hashtable]$ToolDirs
    )
    
    Write-Host "`nCloning repositories..."
    Write-Log "=== Repository Cloning ===" -LogFile $LogFile
    
    $gitExe = "$env:ProgramFiles\Git\cmd\git.exe"
    
    if (-not (Test-Path $gitExe)) {
        Write-Log "Git not found at: $gitExe" -LogFile $LogFile -IsError
        return
    }
    
    $repositories = Get-RemoteJson -Url $RemoteUrl -LogFile $LogFile
    if (-not $repositories) { return }
    
    # Replace placeholders in destination paths
    $toolDirMap = @{
        '$config'           = $ToolDirs.Config.FullName
        '$evasion'          = $ToolDirs.Evasion.FullName
        '$windows'          = $ToolDirs.Windows.FullName
        '$active_directory' = $ToolDirs.ActiveDirectory.FullName
        '$network'          = $ToolDirs.Network.FullName
        '$kubernetes'       = $ToolDirs.Kubernetes.FullName
        '$azure'            = $ToolDirs.Azure.FullName
    }
    
    foreach ($repo in $repositories.PSObject.Properties) {
        $repoUrl = $repo.Name
        $destination = $repo.Value
        
        # Replace placeholders
        foreach ($placeholder in $toolDirMap.Keys) {
            $destination = $destination -replace [regex]::Escape($placeholder), $toolDirMap[$placeholder]
        }
        
        Write-Log "Cloning: $repoUrl -&gt; $destination" -LogFile $LogFile
        &amp; $gitExe clone $repoUrl $destination 2&gt;&amp;1 | Out-File -FilePath $LogFile -Append -Encoding Ascii
    }
}

function Install-Files {
    param(
        [string]$RemoteUrl,
        [string]$LogFile,
        [hashtable]$ToolDirs
    )
    
    Write-Host "`nDownloading files..."
    Write-Log "=== File Downloads ===" -LogFile $LogFile
    
    $files = Get-RemoteJson -Url $RemoteUrl -LogFile $LogFile
    if (-not $files) { return }
    
    # Replace placeholders in destination paths
    $toolDirMap = @{
        '$config'           = $ToolDirs.Config.FullName
        '$evasion'          = $ToolDirs.Evasion.FullName
        '$windows'          = $ToolDirs.Windows.FullName
        '$active_directory' = $ToolDirs.ActiveDirectory.FullName
        '$network'          = $ToolDirs.Network.FullName
        '$kubernetes'       = $ToolDirs.Kubernetes.FullName
        '$azure'            = $ToolDirs.Azure.FullName
    }
    
    foreach ($file in $files.PSObject.Properties) {
        $fileUrl = $file.Name
        $destination = $file.Value
        
        # Replace placeholders
        foreach ($placeholder in $toolDirMap.Keys) {
            $destination = $destination -replace [regex]::Escape($placeholder), $toolDirMap[$placeholder]
        }
        
        # Ensure destination directory exists
        $destinationDir = Split-Path -Path $destination -Parent
        if (-not (Test-Path $destinationDir)) {
            New-Item -Path $destinationDir -ItemType Directory -Force | Out-Null
        }
        
        try {
            Write-Log "Downloading: $fileUrl -&gt; $destination" -LogFile $LogFile
            Invoke-WebRequest -Uri $fileUrl -OutFile $destination -ErrorAction Stop
            Write-Log "Successfully downloaded: $(Split-Path -Path $destination -Leaf)" -LogFile $LogFile
        }
        catch {
            Write-Log "Failed to download $fileUrl : $_" -LogFile $LogFile -IsError
        }
    }
}

function Install-WSL {
    param([string]$LogFile)
    
    Write-Host "`nInstalling WSL..."
    Write-Log "=== WSL Installation ===" -LogFile $LogFile
    
    wsl --install 2&gt;&amp;1 | Out-File -FilePath $LogFile -Append -Encoding Ascii
}

function Invoke-WindowsActivation {
    param([string]$LogFile)
    
    Write-Host "`nActivating Windows and Office..."
    Write-Log "=== Windows/Office Activation ===" -LogFile $LogFile
    
    try {
        &amp; ([ScriptBlock]::Create((Invoke-RestMethod -Uri https://get.activated.win))) /HWID /Ohook 2&gt;&amp;1 | Out-File -FilePath $LogFile -Append -Encoding Ascii
    }
    catch {
        Write-Log "Activation failed: $_" -LogFile $LogFile -IsError
    }
}

# ============================================================================
# CONTAINER INSTALLATION (Requires Reboot)
# ============================================================================

function Install-ContainersStage1 {
    param(
        [string]$RemoteUrl,
        [string]$SetupScriptsPath,
        [string]$LogFile
    )
    
    Write-Host "`nPreparing container installation (Stage 1)..."
    Write-Log "=== Container Installation Stage 1 ===" -LogFile $LogFile
    
    # Fetch container list
    $containers = Get-RemoteJson -Url $RemoteUrl -LogFile $LogFile
    if (-not $containers) { return }
    
    # Save containers to file for Stage 2
    $containersFile = Join-Path $SetupScriptsPath "ContainerList.txt"
    $containers | ForEach-Object { $_ } | Out-File -FilePath $containersFile -Encoding Ascii
    
    # Create Stage 2 script
    $stage2Script = @'
# Container Installation Stage 2 (Post-Reboot)

$logFile = "$env:USERPROFILE\Desktop\Build Logs\containers.txt"

function Write-ContainerLog {
    param([string]$Message)
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    "[$timestamp] $Message" | Out-File -FilePath $logFile -Append -Encoding Ascii
}

Write-ContainerLog "=== Container Installation Stage 2 ==="

# Download and install Docker Desktop
try {
    Write-ContainerLog "Downloading Docker Desktop..."
    $dockerUri = [uri]::New("https://desktop.docker.com/win/main/amd64/Docker%20Desktop%20Installer.exe")
    $dockerInstaller = "$env:TEMP\DockerDesktopInstaller.exe"
    
    $webClient = [System.Net.WebClient]::New()
    $webClient.DownloadFile($dockerUri, $dockerInstaller)
    $webClient.Dispose()
    
    Write-ContainerLog "Installing Docker Desktop..."
    Start-Process -FilePath $dockerInstaller -ArgumentList "install", "--quiet", "--accept-license" -Wait -NoNewWindow
    
    Remove-Item -LiteralPath $dockerInstaller -ErrorAction SilentlyContinue
    Write-ContainerLog "Docker Desktop installed"
}
catch {
    Write-ContainerLog "ERROR: Failed to install Docker Desktop: $_"
    exit 1
}

# Wait for Docker Desktop executable
$dockerTimeout = [datetime]::Now.AddMinutes(5)
$dockerDesktopExe = "$env:ProgramFiles\Docker\Docker\Docker Desktop.exe"

Write-ContainerLog "Waiting for Docker Desktop executable..."
while ($true) {
    if (Test-Path $dockerDesktopExe) {
        Write-ContainerLog "Starting Docker Desktop..."
        Start-Process -FilePath $dockerDesktopExe -WindowStyle Hidden
        break
    }
    
    if ([datetime]::Now -gt $dockerTimeout) {
        Write-ContainerLog "ERROR: Docker Desktop executable not found after timeout"
        exit 1
    }
    
    Start-Sleep -Seconds 1
}

# Wait for Docker Engine to be ready
$engineTimeout = [datetime]::Now.AddMinutes(5)
$dockerExe = "$env:ProgramFiles\Docker\Docker\resources\bin\docker.exe"

Write-ContainerLog "Waiting for Docker Engine to be ready..."
while ($true) {
    try {
        $info = &amp; $dockerExe info 2&gt;&amp;1 | Out-String
        
        if ($info -match "Name: docker-desktop") {
            Write-ContainerLog "Docker Engine is ready"
            break
        }
    }
    catch {
        # Continue waiting
    }
    
    if ([datetime]::Now -gt $engineTimeout) {
        Write-ContainerLog "ERROR: Docker Engine failed to initialize"
        exit 1
    }
    
    Start-Sleep -Seconds 2
}

# Pull container images
$containersFile = "$env:SystemRoot\Setup\Scripts\ContainerList.txt"

if (Test-Path $containersFile) {
    Get-Content -Path $containersFile | ForEach-Object {
        $container = $_.Trim()
        if ($container) {
            Write-ContainerLog "Pulling container: $container"
            &amp; $dockerExe pull $container 2&gt;&amp;1 | Out-File -FilePath $logFile -Append -Encoding Ascii
        }
    }
}

# Cleanup desktop shortcuts
Write-ContainerLog "Cleaning up..."
Remove-Item -Path "$env:PUBLIC\Desktop\*" -ErrorAction SilentlyContinue
Remove-Item -Path "$env:USERPROFILE\Desktop\Docker Desktop.lnk" -ErrorAction SilentlyContinue
Remove-Item -Path "$env:USERPROFILE\Desktop\Insomnia.lnk" -ErrorAction SilentlyContinue

# Generate installation report
Write-ContainerLog "Generating installation report..."

$readmeContent = @()
$readmeContent += "=" * 80
$readmeContent += "Windows 11 Pentesting Environment - Installation Report"
$readmeContent += "=" * 80
$readmeContent += ""
$readmeContent += "Generated: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"
$readmeContent += ""

# Helper function for timeouts
function Invoke-WithTimeout {
    param(
        [ScriptBlock]$ScriptBlock,
        [int]$TimeoutSeconds = 30
    )
    
    $job = Start-Job -ScriptBlock $ScriptBlock
    Wait-Job -Job $job -Timeout $TimeoutSeconds | Out-Null
    
    if ($job.State -eq 'Running') {
        Stop-Job -Job $job
        Remove-Job -Job $job -Force
        return $null
    }
    
    $result = Receive-Job -Job $job
    Remove-Job -Job $job -Force
    return $result
}

# Check PowerShell Modules
$readmeContent += "[*] PowerShell Modules"
$modulesFile = "$env:SystemRoot\Setup\Scripts\ModulesList.txt"
if (Test-Path $modulesFile) {
    Get-Content -Path $modulesFile | ForEach-Object {
        $moduleName = $_.Trim()
        if ($moduleName) {
            try {
                $installed = Invoke-WithTimeout -TimeoutSeconds 10 -ScriptBlock {
                    param($name)
                    Get-Module -ListAvailable -Name $name -ErrorAction SilentlyContinue
                } -ArgumentList $moduleName
                
                if ($installed) {
                    $readmeContent += "[+] $moduleName"
                } else {
                    $readmeContent += "[-] $moduleName"
                }
            } catch {
                $readmeContent += "[?] $moduleName (check timed out)"
            }
        }
    }
}
$readmeContent += ""

# Check Windows Capabilities
$readmeContent += "[*] Windows Capabilities"
$capabilitiesFile = "$env:SystemRoot\Setup\Scripts\CapabilitiesList.txt"
if (Test-Path $capabilitiesFile) {
    Get-Content -Path $capabilitiesFile | ForEach-Object {
        $capabilityName = $_.Trim()
        if ($capabilityName) {
            try {
                $capability = Invoke-WithTimeout -TimeoutSeconds 10 -ScriptBlock {
                    param($name)
                    Get-WindowsCapability -Online -Name $name -ErrorAction SilentlyContinue
                } -ArgumentList $capabilityName
                
                if ($capability -and $capability.State -eq "Installed") {
                    $readmeContent += "[+] $capabilityName"
                } else {
                    $readmeContent += "[-] $capabilityName"
                }
            } catch {
                $readmeContent += "[?] $capabilityName (check timed out)"
            }
        }
    }
}
$readmeContent += ""

# Check WinGet Applications
$readmeContent += "[*] WinGet Applications"
$wingetFile = "$env:SystemRoot\Setup\Scripts\WingetList.txt"
$wingetExe = "$env:LOCALAPPDATA\Microsoft\WindowsApps\winget.exe"
if ((Test-Path $wingetFile) -and (Test-Path $wingetExe)) {
    Get-Content -Path $wingetFile | ForEach-Object {
        $appId = $_.Trim()
        if ($appId) {
            try {
                $result = Invoke-WithTimeout -TimeoutSeconds 15 -ScriptBlock {
                    param($exe, $id)
                    &amp; $exe list --id $id --exact 2&gt;&amp;1 | Out-String
                } -ArgumentList $wingetExe, $appId
                
                if ($result -and $result -match [regex]::Escape($appId)) {
                    $readmeContent += "[+] $appId"
                } else {
                    $readmeContent += "[-] $appId"
                }
            } catch {
                $readmeContent += "[?] $appId (check timed out)"
            }
        }
    }
}
$readmeContent += ""

# Check Repositories
$readmeContent += "[*] Repositories"
$reposFile = "$env:SystemRoot\Setup\Scripts\RepositoriesList.txt"
if (Test-Path $reposFile) {
    Get-Content -Path $reposFile | ForEach-Object {
        $line = $_.Trim()
        if ($line) {
            $parts = $line -split '\|'
            if ($parts.Count -eq 2) {
                $repoUrl = $parts[0]
                $repoPath = $parts[1]
                
                $gitFolder = Join-Path $repoPath ".git"
                if ((Test-Path $repoPath) -and (Test-Path $gitFolder)) {
                    $readmeContent += "[+] $repoUrl"
                } else {
                    $readmeContent += "[-] $repoUrl"
                }
            }
        }
    }
}
$readmeContent += ""

# Check Files
$readmeContent += "[*] Downloaded Files"
$filesFile = "$env:SystemRoot\Setup\Scripts\FilesList.txt"
if (Test-Path $filesFile) {
    Get-Content -Path $filesFile | ForEach-Object {
        $line = $_.Trim()
        if ($line) {
            $parts = $line -split '\|'
            if ($parts.Count -eq 2) {
                $fileUrl = $parts[0]
                $filePath = $parts[1]
                
                if ((Test-Path $filePath) -and ((Get-Item $filePath).Length -gt 0)) {
                    $readmeContent += "[+] $fileUrl"
                } else {
                    $readmeContent += "[-] $fileUrl"
                }
            }
        }
    }
}
$readmeContent += ""

# Check Containers
$dockerProcess = Get-Process "Docker Desktop" -ErrorAction SilentlyContinue
if (-not $dockerProcess) {
    $readmeContent += "[*] Starting Docker Desktop..."
    Start-Process $dockerDesktopExe -ErrorAction SilentlyContinue
    
    # Wait for Docker to be ready
    $dockerReady = Invoke-WithTimeout -TimeoutSeconds 60 -ScriptBlock {
        param($exe)
        $maxAttempts = 30
        for ($i = 0; $i -lt $maxAttempts; $i++) {
            try {
                $result = &amp; $exe info 2&gt;&amp;1
                if ($LASTEXITCODE -eq 0) {
                    return $true
                }
            } catch {}
            Start-Sleep -Seconds 2
        }
        return $false
    } -ArgumentList $dockerExe
}

$readmeContent += "[*] Container Images"
if (Test-Path $containersFile) {
    Get-Content -Path $containersFile | ForEach-Object {
        $container = $_.Trim()
        if ($container) {
            try {
                $result = Invoke-WithTimeout -TimeoutSeconds 10 -ScriptBlock {
                    param($exe, $img)
                    &amp; $exe images $img --format "{{.Repository}}:{{.Tag}}" 2&gt;&amp;1 | Out-String
                } -ArgumentList $dockerExe, $container
                
                if ($result -and $result -match [regex]::Escape($container)) {
                    $readmeContent += "[+] $container"
                } else {
                    $readmeContent += "[-] $container"
                }
            } catch {
                $readmeContent += "[?] $container (check timed out)"
            }
        }
    }
}
$readmeContent += ""

# Add service information
$readmeContent += "=" * 80
$readmeContent += "Service URLs"
$readmeContent += "=" * 80
$readmeContent += ""
$readmeContent += "BloodHound:  http://localhost:10000"
$readmeContent += "CyberChef:   http://localhost:10001"
$readmeContent += "Nessus:      https://localhost:8834"
$readmeContent += ""
$readmeContent += "Desktop shortcuts (.bat files) have been created to start services."
$readmeContent += ""
$readmeContent += "=" * 80

# Write README to desktop
$readmePath = "$env:USERPROFILE\Desktop\README.txt"
$readmeContent | Out-File -FilePath $readmePath -Encoding Ascii

Write-ContainerLog "Installation report created at: $readmePath"
Write-ContainerLog "=== Container Installation Complete ==="

# Final reboot
Restart-Computer -Force
'@
    
    $stage2ScriptPath = Join-Path $SetupScriptsPath "ContainerInstall.ps1"
    $stage2Script | Out-File -FilePath $stage2ScriptPath -Encoding Ascii
    
    # Save lists for verification
    $wingetExe = "$env:LOCALAPPDATA\Microsoft\WindowsApps\winget.exe"
    if (Test-Path $wingetExe) {
        $wingetApps = Get-RemoteJson -Url $Config.RemoteUrls.WingetApplications -LogFile $LogFile
        if ($wingetApps) {
            $wingetApps.PSObject.Properties.Name | Out-File -FilePath (Join-Path $SetupScriptsPath "WingetList.txt") -Encoding Ascii
        }
    }
    
    $modules = Get-RemoteJson -Url $Config.RemoteUrls.PowerShellModules -LogFile $LogFile
    if ($modules) {
        $modules | Out-File -FilePath (Join-Path $SetupScriptsPath "ModulesList.txt") -Encoding Ascii
    }
    
    $capabilities = Get-RemoteJson -Url $Config.RemoteUrls.WindowsCapabilities -LogFile $LogFile
    if ($capabilities) {
        $capabilities | Out-File -FilePath (Join-Path $SetupScriptsPath "CapabilitiesList.txt") -Encoding Ascii
    }
    
    $repositories = Get-RemoteJson -Url $Config.RemoteUrls.Repositories -LogFile $LogFile
    if ($repositories) {
        $toolDirMap = @{
            '$config'           = $toolDirs.Config.FullName
            '$evasion'          = $toolDirs.Evasion.FullName
            '$windows'          = $toolDirs.Windows.FullName
            '$active_directory' = $toolDirs.ActiveDirectory.FullName
            '$network'          = $toolDirs.Network.FullName
            '$kubernetes'       = $toolDirs.Kubernetes.FullName
            '$azure'            = $toolDirs.Azure.FullName
        }
        
        $reposList = @()
        foreach ($repo in $repositories.PSObject.Properties) {
            $repoUrl = $repo.Name
            $destination = $repo.Value
            foreach ($placeholder in $toolDirMap.Keys) {
                $destination = $destination -replace [regex]::Escape($placeholder), $toolDirMap[$placeholder]
            }
            $reposList += "$repoUrl|$destination"
        }
        $reposList | Out-File -FilePath (Join-Path $SetupScriptsPath "RepositoriesList.txt") -Encoding Ascii
    }
    
    $files = Get-RemoteJson -Url $Config.RemoteUrls.Files -LogFile $LogFile
    if ($files) {
        $toolDirMap = @{
            '$config'           = $toolDirs.Config.FullName
            '$evasion'          = $toolDirs.Evasion.FullName
            '$windows'          = $toolDirs.Windows.FullName
            '$active_directory' = $toolDirs.ActiveDirectory.FullName
            '$network'          = $toolDirs.Network.FullName
            '$kubernetes'       = $toolDirs.Kubernetes.FullName
            '$azure'            = $toolDirs.Azure.FullName
        }
        
        $filesList = @()
        foreach ($file in $files.PSObject.Properties) {
            $fileUrl = $file.Name
            $destination = $file.Value
            foreach ($placeholder in $toolDirMap.Keys) {
                $destination = $destination -replace [regex]::Escape($placeholder), $toolDirMap[$placeholder]
            }
            $filesList += "$fileUrl|$destination"
        }
        $filesList | Out-File -FilePath (Join-Path $SetupScriptsPath "FilesList.txt") -Encoding Ascii
    }
    
    # Register Stage 2 script to run after next reboot
    $runOncePath = "HKCU:\Software\Microsoft\Windows\CurrentVersion\RunOnce"
    $runOnceCommand = "powershell -ExecutionPolicy Bypass -File `"$stage2ScriptPath`""
    New-ItemProperty -Path $runOncePath -Name "ContainerInstall" -Value $runOnceCommand -Force | Out-Null
    
    Write-Log "Container Stage 2 script registered for next boot" -LogFile $LogFile
}

# ============================================================================
# MAIN EXECUTION
# ============================================================================

Write-Host "==================================================================="
Write-Host "  Windows 11 Pentesting Environment Setup"
Write-Host "==================================================================="
Write-Host ""

# Create directory structure
$structure = New-DirectoryStructure -Config $Config
$logs = $structure.Logs
$toolDirs = $structure.ToolDirs

# Check system compatibility
if (-not (Test-SystemCompatibility -MinimumBuild $Config.MinimumBuild -LogFile $logs.Main.FullName)) {
    Write-Host "`nSetup cannot continue. Press any key to exit..."
    $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    exit 1
}

# Apply system configuration
Set-PowerConfiguration -PowerConfig $Config.PowerConfig
Set-DisplayScaling
Add-DefenderExclusions -Paths $Config.DefenderExclusions
Set-EdgeBookmarks -Bookmarks $Config.EdgeBookmarks -LogFile $logs.Main.FullName
New-ServiceShortcuts -ToolDirs $toolDirs

# Install components
Install-PowerShellModules -RemoteUrl $Config.RemoteUrls.PowerShellModules -LogFile $logs.PowerShell_Modules.FullName
Install-WindowsCapabilities -RemoteUrl $Config.RemoteUrls.WindowsCapabilities -LogFile $logs.Capabilities.FullName
Install-WingetApplications -RemoteUrl $Config.RemoteUrls.WingetApplications -LogFile $logs.WinGet.FullName
Invoke-WindowsActivation -LogFile $logs.Main.FullName
Install-Repositories -RemoteUrl $Config.RemoteUrls.Repositories -LogFile $logs.Repositories.FullName -ToolDirs $toolDirs
Install-Files -RemoteUrl $Config.RemoteUrls.Files -LogFile $logs.Files.FullName -ToolDirs $toolDirs
Install-WSL -LogFile $logs.Main.FullName

# Prepare container installation (requires reboot)
Install-ContainersStage1 -RemoteUrl $Config.RemoteUrls.Containers -SetupScriptsPath $Config.Directories.SetupScripts -LogFile $logs.Containers.FullName

Write-Host "`n==================================================================="
Write-Host "  Initial setup complete. System will reboot to continue..."
Write-Host "==================================================================="

Start-Sleep -Seconds 5
Restart-Computer -Force
		</File>
		<File path="C:\Windows\Setup\Scripts\Specialize.ps1">
$scripts = @(
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\GetComputerName.ps1' -Raw | Invoke-Expression &gt; 'C:\Windows\Setup\Scripts\ComputerName.txt';
		Start-Process -FilePath ( Get-Process -Id $PID ).Path -ArgumentList '-NoProfile', '-Command', 'Get-Content -LiteralPath "C:\Windows\Setup\Scripts\SetComputerName.ps1" -Raw | Invoke-Expression;' -WindowStyle 'Hidden';
		Start-Sleep -Seconds 10;
	};
	{
		reg.exe add "HKLM\SYSTEM\Setup\MoSetup" /v AllowUpgradesWithUnsupportedTPMOrCPU /t REG_DWORD /d 1 /f;
	};
	{
		Remove-Item -LiteralPath 'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\DevHomeUpdate' -Force -ErrorAction 'SilentlyContinue';
	};
	{
		reg.exe add "HKCR\.txt\ShellNew" /v ItemName /t REG_EXPAND_SZ /d "@C:\Windows\system32\notepad.exe,-470" /f;
		reg.exe add "HKCR\.txt\ShellNew" /v NullFile /t REG_SZ /f;
		reg.exe add "HKCR\txtfilelegacy" /v FriendlyTypeName /t REG_EXPAND_SZ /d "@C:\Windows\system32\notepad.exe,-469" /f;
		reg.exe add "HKCR\txtfilelegacy" /ve /t REG_SZ /d "Text Document" /f;
	};
	{
		Remove-Item -LiteralPath 'C:\Users\Default\AppData\Roaming\Microsoft\Windows\Start Menu\Programs\OneDrive.lnk', 'C:\Windows\System32\OneDriveSetup.exe', 'C:\Windows\SysWOW64\OneDriveSetup.exe' -ErrorAction 'Continue';
	};
	{
		Remove-Item -LiteralPath 'Registry::HKLM\Software\Microsoft\WindowsUpdate\Orchestrator\UScheduler_Oobe\OutlookUpdate' -Force -ErrorAction 'SilentlyContinue';
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Communications" /v ConfigureChatAutoInstall /t REG_DWORD /d 0 /f;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemovePackages.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemoveCapabilities.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\RemoveFeatures.ps1' -Raw | Invoke-Expression;
	};
	{
		net.exe accounts /maxpwage:UNLIMITED;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Windows\CloudContent" /v "DisableCloudOptimizedContent" /t REG_DWORD /d 1 /f;
		[System.Diagnostics.EventLog]::CreateEventSource( 'UnattendGenerator', 'Application' );
	};
	{
		Register-ScheduledTask -TaskName 'UnlockStartLayout' -Xml $( Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\UnlockStartLayout.xml' -Raw );
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer" /v SmartScreenEnabled /t REG_SZ /d "Off" /f;
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WTDS\Components" /v ServiceEnabled /t REG_DWORD /d 0 /f;
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WTDS\Components" /v NotifyMalicious /t REG_DWORD /d 0 /f;
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WTDS\Components" /v NotifyPasswordReuse /t REG_DWORD /d 0 /f;
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\WTDS\Components" /v NotifyUnsafeApp /t REG_DWORD /d 0 /f;
		reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Windows Defender Security Center\Systray" /v HideSystray /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" /v EnableLUA /t REG_DWORD /d 0 /f
	};
	{
		reg.exe add "HKLM\SYSTEM\CurrentControlSet\Control\FileSystem" /v LongPathsEnabled /t REG_DWORD /d 1 /f
	};
	{
		icacls.exe C:\ /remove:g "*S-1-5-11"
	};
	{
		auditpol.exe /set /subcategory:"{0CCE922B-69AE-11D9-BED3-505054503030}" /success:enable /failure:enable;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\Audit" /v ProcessCreationIncludeCmdLine_Enabled /t REG_DWORD /d 1 /f;
	};
	{
		Set-ExecutionPolicy -Scope 'LocalMachine' -ExecutionPolicy 'RemoteSigned' -Force;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Policies\Microsoft\Dsh" /v AllowNewsAndInterests /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Authentication\LogonUI\BootAnimation" /v DisableStartupSound /t REG_DWORD /d 1 /f;
		reg.exe add "HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\EditionOverrides" /v UserSetting_DisableStartupSound /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Windows\CloudContent" /v "DisableWindowsConsumerFeatures" /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Edge" /v HideFirstRunExperience /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKLM\Software\Policies\Microsoft\Edge\Recommended" /v BackgroundModeEnabled /t REG_DWORD /d 0 /f;
		reg.exe add "HKLM\Software\Policies\Microsoft\Edge\Recommended" /v StartupBoostEnabled /t REG_DWORD /d 0 /f;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetStartPins.ps1' -Raw | Invoke-Expression;
	};
	{
		reg.exe add "HKU\.DEFAULT\Control Panel\Accessibility\StickyKeys" /v Flags /t REG_SZ /d 10 /f;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to customize your Windows installation. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 | Out-String &gt;&gt; "C:\Windows\Setup\Scripts\Specialize.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\UserOnce.ps1">
$scripts = @(
	{
		Get-AppxPackage -Name 'Microsoft.Windows.Ai.Copilot.Provider' | Remove-AppxPackage;
	};
	{
		[System.Diagnostics.EventLog]::WriteEntry( 'UnattendGenerator', "User '$env:USERNAME' has requested to unlock the Start menu layout.", [System.Diagnostics.EventLogEntryType]::Information, 1 );
	};
	{
		Set-ItemProperty -LiteralPath 'Registry::HKCU\AppEvents\Schemes' -Name '(Default)' -Type 'String' -Value '.None';
	};
	{
		reg.exe add "HKCU\Software\Classes\CLSID\{86ca1aa0-34aa-4e8b-a509-50c905bae2a2}\InprocServer32" /ve /f;
	};
	{
		Set-ItemProperty -LiteralPath 'Registry::HKCU\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced' -Name 'LaunchTo' -Type 'DWord' -Value 1;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetColorTheme.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\SetWallpaper.ps1' -Raw | Invoke-Expression;
	};
	{
		Get-Process -Name 'explorer' -ErrorAction 'SilentlyContinue' | Where-Object -FilterScript {
			$_.SessionId -eq ( Get-Process -Id $PID ).SessionId;
		} | Stop-Process -Force;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to configure this user account. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 | Out-String &gt;&gt; "$env:TEMP\UserOnce.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\DefaultUser.ps1">
$scripts = @(
	{
		reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\WindowsCopilot" /v TurnOffWindowsCopilot /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Internet Explorer\LowRegistry\Audio\PolicyConfig\PropertyStore" /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Notepad" /v ShowStoreBanner /t REG_DWORD /d 0 /f;
	};
	{
		Remove-ItemProperty -LiteralPath 'Registry::HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Run' -Name 'OneDriveSetup' -Force -ErrorAction 'Continue';
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\GameDVR" /v AppCaptureEnabled /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\Explorer" /v "StartLayoutFile" /t REG_SZ /d "C:\Windows\Setup\Scripts\TaskbarLayoutModification.xml" /f;
		reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\Explorer" /v "LockedStartLayout" /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "HideFileExt" /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v "Hidden" /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v ShowTaskViewButton /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Edge\SmartScreenEnabled" /ve /t REG_DWORD /d 0 /f;
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Edge\SmartScreenPuaEnabled" /ve /t REG_DWORD /d 0 /f;
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\AppHost" /v EnableWebContentEvaluation /t REG_DWORD /d 0 /f;
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\AppHost" /v PreventOverride /t REG_DWORD /d 0 /f;
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\TurnOffSystemSounds.ps1' -Raw | Invoke-Expression;
	};
	{
		$names = @(
		  'ContentDeliveryAllowed';
		  'FeatureManagementEnabled';
		  'OEMPreInstalledAppsEnabled';
		  'PreInstalledAppsEnabled';
		  'PreInstalledAppsEverEnabled';
		  'SilentInstalledAppsEnabled';
		  'SoftLandingEnabled';
		  'SubscribedContentEnabled';
		  'SubscribedContent-310093Enabled';
		  'SubscribedContent-338387Enabled';
		  'SubscribedContent-338388Enabled';
		  'SubscribedContent-338389Enabled';
		  'SubscribedContent-338393Enabled';
		  'SubscribedContent-353694Enabled';
		  'SubscribedContent-353696Enabled';
		  'SubscribedContent-353698Enabled';
		  'SystemPaneSuggestionsEnabled';
		);
		
		foreach( $name in $names ) {
		  reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\ContentDeliveryManager" /v $name /t REG_DWORD /d 0 /f;
		}
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced" /v TaskbarAl /t REG_DWORD /d 0 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Policies\Microsoft\Windows\Explorer" /v DisableSearchBoxSuggestions /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\Explorer\Advanced\TaskbarDeveloperSettings" /v TaskbarEndTask /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Control Panel\Accessibility\StickyKeys" /v Flags /t REG_SZ /d 10 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\DWM" /v ColorPrevalence /t REG_DWORD /d 1 /f;
	};
	{
		reg.exe add "HKU\DefaultUser\Software\Microsoft\Windows\CurrentVersion\RunOnce" /v "UnattendedSetup" /t REG_SZ /d "powershell.exe -WindowStyle Hidden -NoProfile -Command \""Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\UserOnce.ps1' -Raw | Invoke-Expression;\""" /f;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to modify the default user&#x2019;&#x2019;s registry hive. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 | Out-String &gt;&gt; "C:\Windows\Setup\Scripts\DefaultUser.log";
		</File>
		<File path="C:\Windows\Setup\Scripts\FirstLogon.ps1">
$scripts = @(
	{
		Set-ItemProperty -LiteralPath 'Registry::HKLM\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name 'AutoLogonCount' -Type 'DWord' -Force -Value 0;
	};
	{
		cmd.exe /c "rmdir C:\Windows.old";
	};
	{
		Get-Content -LiteralPath 'C:\Windows\Setup\Scripts\unattend-01.ps1' -Raw | Invoke-Expression;
	};
	{
		Remove-Item -LiteralPath @(
		  'C:\Windows\Panther\unattend.xml';
		  'C:\Windows\Panther\unattend-original.xml';
		  'C:\Windows\Setup\Scripts\Wifi.xml';
		) -Force -ErrorAction 'SilentlyContinue' -Verbose;
	};
);

&amp; {
  [float] $complete = 0;
  [float] $increment = 100 / $scripts.Count;
  foreach( $script in $scripts ) {
    Write-Progress -Activity 'Running scripts to finalize your Windows installation. Do not close this window.' -PercentComplete $complete;
    '*** Will now execute command &#xAB;{0}&#xBB;.' -f $(
      $str = $script.ToString().Trim() -replace '\s+', ' ';
      $max = 100;
      if( $str.Length -le $max ) {
        $str;
      } else {
        $str.Substring( 0, $max - 1 ) + '&#x2026;';
      }
    );
    $start = [datetime]::Now;
    &amp; $script;
    '*** Finished executing command after {0:0} ms.' -f [datetime]::Now.Subtract( $start ).TotalMilliseconds;
    "`r`n" * 3;
    $complete += $increment;
  }
} *&gt;&amp;1 | Out-String &gt;&gt; "C:\Windows\Setup\Scripts\FirstLogon.log";
		</File>
	</Extensions>
</unattend>
